{"version":3,"sources":["assets/Pyxis.jpg","components/Header.js","components/Footer.js","components/Menu.js","pages/About.js","components/LinkBoxes.js","pages/boardGames/BoardGamesIndex.js","pages/boardGames/BoardGamesDetails.js","pages/digitalGames/DigitalGamesIndex.js","pages/digitalGames/DigitalGamesUtils.js","pages/digitalGames/Numbers/NumbersGame.js","pages/digitalGames/Numbers/Numbers.js","pages/digitalGames/OnlyConnect/OnlyConnectTimer.js","pages/digitalGames/OnlyConnect/OnlyConnectGrid.js","pages/digitalGames/OnlyConnect/OnlyConnectLives.js","pages/digitalGames/OnlyConnect/OnlyConnectGame.js","pages/digitalGames/OnlyConnect/OnlyConnectApp.js","pages/digitalGames/OnlyConnect/OnlyConnect.js","pages/digitalGames/Millionaire/MillionaireQuestionPanel.js","pages/digitalGames/Millionaire/MillionaireConstants.js","pages/digitalGames/Millionaire/MillionaireMessagePanel.js","pages/digitalGames/Millionaire/MillionaireSidePanel.js","pages/digitalGames/Millionaire/MillionaireGame.js","pages/digitalGames/Millionaire/MillionaireQuestionLists.js","pages/digitalGames/Millionaire/MillionaireApp.js","pages/digitalGames/Millionaire/Millionaire.js","pages/digitalGames/PocketHexes/Hexagon.js","pages/digitalGames/PocketHexes/PocketHexesGame.js","pages/digitalGames/PocketHexes/PocketHexes.js","pages/digitalGames/DigitalGamesDetails.js","pages/Contact.js","App.js","index.js","assets/InternsOfHades.jpeg","assets/Background.jpeg","assets/Herakles.jpg","assets/TheVinylAge.jpg","assets/RulesInc.jpg","pages/boardGames/Herakles.md","pages/boardGames/TheVinylAge.md","pages/boardGames/Pyxis.md","pages/boardGames/RulesInc.md","pages/boardGames/InternsOfHades.md","pages/digitalGames/Numbers/Numbers.md","pages/digitalGames/OnlyConnect/OnlyConnect.md","pages/digitalGames/Millionaire/Millionaire.md","pages/digitalGames/PocketHexes/PocketHexes.md","assets/PocketHexesScoring.png","assets/PocketHexesExample1.png","assets/PocketHexesExample2.png","assets/PocketHexesExample3.png","assets/PocketHexesScoringExample1.png","assets/PocketHexesScoringExample2.png","assets/PocketHexes.pdf","assets/profilePhoto.jpg"],"names":["module","exports","backgroundStyle","backgroundImage","Background","backgroundSize","backgroundPosition","Header","style","className","footerStyle","height","backgroundColor","color","fontWeight","flexShrink","display","alignItems","justifyContent","Footer","Menu","useState","open","setOpen","onClick","to","About","src","pyxisPhoto","alt","href","LinkBoxes","props","links","map","link","image","url","name","games","PyxisImage","HeraklesImage","TheVinylAgeImage","RulesIncImage","InternsOfHadesImage","BoardGamesIndex","BoardGamesDetails","useParams","defaultMarkdown","markdown","setMarkdown","markdownPages","HeraklesMarkdown","TheVinylAgeMarkdown","RulesIncMarkdown","InternsOfHadesMarkdown","PyxisMarkdown","fetch","then","res","text","source","DigitalGamesIndex","randomInteger","max","min","multiple","range","multipleRange","Math","floor","multipleLowerLimit","random","ceil","shuffleArray","array","counter","length","index","element","splice","push","arraysMatch","arr1","arr2","sort","i","NumbersGame","restartGame","target","numbersArray","includes","upcomingNumbers","setState","numbers","score","movesRemaining","highlightedOperation","highlightedIndex","errorMessage","scoreMessage","gameOver","operations","makeMove","clickedIndex","firstNumber","state","secondNumber","createdNumber","performOperation","newNumbersArray","pickNewRandomNumber","updateTarget","endGame","newNumber","pop","refillUpcomingArray","Number","newTarget","this","operation","number","key","handleNumberClick","highlighted","smalltext","handleOperationClick","handleCancelClick","show","React","Component","Numbers","NumbersMarkdown","OnlyConnectTimer","expiredCallback","forceEnd","timeTaken","setTimeTaken","callbackCalled","setCallbackCalled","timeUsedPercentage","toString","timerBarStyle","width","useEffect","setTimeout","OnlyConnectGrid","correctAnswers","remainingAnswers","highlightedAnswers","boxClickHandler","allAnswers","concat","answerGrid","slice","rowsCorrect","id","rowscorrect","row","rowIndex","solved","boxText","columnIndex","OnlyConnectLives","count","lives","life","lifeIndex","OnlyConnectGame","answer","solvedAnswers","indexOf","highlightedAnswerIndex","checkAnswers","message","timerExpires","pointsString","revealAnswers","unsolvedAnswers","answers","flat","answerList","livesRemaining","findAndPopMatchingAnswer","moveHighlightedBoxesToSolved","answerIndex","OnlyConnectApp","content","puzzle","setPuzzle","puzzle1","puzzle2","buttonClick","OnlyConnect","OnlyConnectMarkdown","questionLetters","MillionaireQuestionPanel","currentQuestion","highlightedAnswer","fiftyFifty","questionState","callback","doesFiftyFiftyHide","correctAnswer","fiftyFiftyAnswer","question","questionstate","hideanswer","pointsList","sideButtons","eventButtons","MillionaireMessagePanel","greenButtonText","redButtonText","hidebutton","MillionaireSidePanel","currentScoreIndex","lifelines","showWalkAway","lifeline","lifelineIndex","hidelifeline","points","pointsIndex","checkpoint","currentscore","MillionaireGame","highlightQuestion","clearAnswer","finalScoreSet","submitAnswer","questions","questionIndex","finalScoreIndex","scoreIndex","allQuestionsDone","showWalkaway","nextButton","incorrectAnswerSubmitted","displayFinalScoreAndContinue","printScore","string","continueWithRound","lifelineFiftyFifty","consumeLifeline","lifelineAsk","button","console","log","askA","askB","walkAwayPrompt","walkAwayConfirm","walkAwayCancel","handleEventButton","handleSideButton","testPuzzle","MillionaireApp","Millionaire","MillionaireMarkdown","Hexagon","hex","hexstate","value","viewBox","hexStates","PocketHexesGame","scoredThisRound","diceToPick","diceRolls","generateDiceRolls","selectedDice","grid","createGrid","createRow","centerHex","rowNumber","startIndex","createHex","spendDice","updateHexes","valueToPlace","hexIndex","updateHexForPlacable","undefined","updateHexForScorable","adjList","getAdjacentHexes","highestAdjValue","getHighestAdjValue","adjHexes","adjHex","targetHex","sameRow","sameRowHex","rowAbove","rowAboveHex","rowBelow","rowBelowHex","parseInt","diceList","newDiceRolls","diceMax","diceResult","jndex","handleSelectHex","roll","handleSelectDice","rollDice","PocketHexes","PocketHexesMarkdown","replace","scoring","scoringExample1","scoringExample2","example1","example2","example3","printAndPlay","processAndSetMarkdown","DigitalGamesDetails","pages","Contact","profilePhoto","App","basename","process","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,mC,qLCIrCC,EAAkB,CACtBC,gBAAgB,OAAD,O,OAASC,EAAT,KACfC,eAAgB,QAChBC,mBAAoB,QAkBPC,MAff,WACE,OACE,gCACE,yBAAKC,MAAON,EAAiBO,UAAU,kBACrC,uBAAGA,UAAU,gBAAb,yBAGA,uBAAGA,UAAU,mBAAb,wBCfFC,EAAc,CAClBC,OAAQ,OACRC,gBAAiB,UACjBC,MAAO,QACPC,WAAY,OACZC,WAAY,IACZC,QAAS,OACTC,WAAY,SACZC,eAAgB,UAaHC,MAVf,WACE,OACE,4BAAQX,MAAOE,GACb,2D,gCCkBSU,MA7Bf,WAAiB,IAAD,EACUC,oBAAS,GADnB,mBACPC,EADO,KACDC,EADC,KAGd,OACE,yBAAKd,UAAU,QACb,4BAAQe,QAAS,WAAYD,GAASD,IAAQb,UAAU,eACtD,kBAAC,IAAD,OAEF,wBAAIA,UAAU,YAAYa,KAAMA,GAC9B,wBAAIb,UAAU,kBACZ,kBAAC,IAAD,CAAMgB,GAAG,UAAT,UAEF,wBAAIhB,UAAU,kBACZ,kBAAC,IAAD,CAAMgB,GAAG,gBAAT,gBAEF,wBAAIhB,UAAU,kBACZ,kBAAC,IAAD,CAAMgB,GAAG,kBAAT,kBAEF,wBAAIhB,UAAU,kBACZ,kBAAC,IAAD,CAAMgB,GAAG,8BAAT,eAEF,wBAAIhB,UAAU,kBACZ,kBAAC,IAAD,CAAMgB,GAAG,YAAT,e,0CCIKC,MA1Bf,WACE,OACE,yBAAKjB,UAAU,gBACb,uBAAGA,UAAU,cAAb,SACA,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,mBAAmBkB,IAAKC,IAAYC,IAAI,uBACvD,6LAGqC,uBAAGC,KAAK,6CAAR,QAHrC,KAKA,uQAE0H,uBAAGA,KAAK,mDAAR,0BAF1H,KAIA,gLAGA,qG,mDCHOC,MAhBf,SAAmBC,GACjB,OACE,yBAAKvB,UAAU,cAEXuB,EAAMC,MAAMC,KAAI,SAACC,GAAD,OACd,yBAAK1B,UAAU,WAAWD,MAAO,CAACL,gBAAgB,OAAD,OAASgC,EAAKC,MAAd,OAC/C,kBAAC,IAAD,CAAMX,GAAIU,EAAKE,KACb,yBAAK5B,UAAU,oBAAoB0B,EAAKG,aCHhDC,EAAQ,CACZ,CACE,KAAQ,QACR,MAASC,IACT,IAAO,sBAET,CACE,KAAQ,WACR,MAASC,IACT,IAAO,yBAET,CACE,KAAQ,gBACR,MAASC,IACT,IAAO,8BAET,CACE,KAAQ,aACR,MAASC,IACT,IAAO,0BAET,CACE,KAAQ,mBACR,MAASC,IACT,IAAO,kCAaIC,MATf,WACE,OACE,yBAAKpC,UAAU,gBACb,uBAAGA,UAAU,cAAb,eACA,kBAAC,EAAD,CAAWwB,MAAOM,M,sGCFTO,MA3Bf,WAA8B,IACtBR,EAASS,cAATT,KAEAU,EAAkB,6BAA+BV,EAAO,kBAHnC,EAIKjB,mBAAS2B,GAJd,mBAIpBC,EAJoB,KAIVC,EAJU,KAMrBC,EAAgB,CACpB,SAAYC,IACZ,gBAAiBC,IACjB,YAAaC,IACb,mBAAoBC,IACpB,MAASC,KAOX,OAJ2B,MAAvBL,EAAcb,IAChBmB,MAAMN,EAAcb,IAAOoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAE,GAAI,OAAIV,EAAYU,MAI5E,yBAAKnD,UAAU,gBACb,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAeoD,OAAQZ,OC5BzBV,EAAQ,CACZ,CACE,KAAQ,UACR,MAASC,IACT,IAAO,0BAET,CACE,KAAQ,eACR,MAASA,IACT,IAAO,+BAET,CACE,KAAQ,oBACR,MAASA,IACT,IAAO,+BAET,CACE,KAAQ,gCACR,MAASA,IACT,IAAO,+BAaIsB,MATf,WACE,OACE,yBAAKrD,UAAU,gBACb,uBAAGA,UAAU,cAAb,iBACA,kBAAC,EAAD,CAAWwB,MAAOM,M,wCC5BXwB,G,OAAgB,SAASC,EAAKC,EAAKC,GAC5C,IAAIC,EAAQH,EAAMC,EAAM,EACpBG,EAAgBC,KAAKC,MAAMH,EAAQD,GACnCK,EAAqBF,KAAKC,MAAML,EAAMC,GAAY,EAElDM,EAASH,KAAKG,SAMlB,OALAA,GAAkBJ,EAClBI,EAASH,KAAKI,KAAKD,GACnBA,GAAkBD,EAClBC,GAAkBN,IAMTQ,EAAe,SAASC,GAGjC,IAFA,IAAIC,EAAUD,EAAME,OAEdD,EAAU,GAAG,CACf,IAAIE,EAAQT,KAAKC,MAAMD,KAAKG,SAAWI,GACvCA,IAEA,IAAIG,EAAUJ,EAAMK,OAAOF,EAAO,GAClCH,EAAMM,KAAKF,EAAQ,MAIdG,GAAc,SAASC,EAAMC,GAKtC,GAJAD,EAAKE,OACLD,EAAKC,OAGDF,EAAKN,SAAWO,EAAKP,OAAQ,OAAO,EAGxC,IAAK,IAAIS,EAAI,EAAGA,EAAIH,EAAKN,OAAQS,IAC7B,GAAIH,EAAKG,KAAOF,EAAKE,GAAI,OAAO,EAGpC,OAAO,GC2PIC,G,kDA/RX,WAAYvD,GAAQ,IAAD,8BACf,cAAMA,IAoBVwD,YAAc,WAKV,IAHA,IAWIC,EAXAC,EAAe,GAGVJ,EAAI,EAAGA,EAAI,EAAGA,IACnBI,EAAaT,KAAKlB,EAAc,EAAG,EAAG,IAI1C2B,EAAaT,KAAKlB,EAAc,GAAI,GAAI,IACxC2B,EAAaT,KAAKlB,EAAc,IAAK,GAAI,KAIzC,GACI0B,EAAS1B,EAAc,GAAI,GAAI,SAC1B2B,EAAaC,SAASF,IAE/B,IAAIG,EAAkB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,IACjClB,EAAakB,GAEb,EAAKC,SAAS,CACVC,QAASJ,EACTE,gBAAiBA,EACjBH,OAAQA,EACRM,MAAO,EACPC,eAAgB,EAChBC,qBAAsB,KACtBC,iBAAkB,KAClBC,aAAc,GACdC,aAAc,GACdC,UAAU,KArDC,EAyDnBC,WAAa,CAAC,IAAK,IAAK,IAAK,KAzDV,EA0EnBC,SAAW,SAACC,GACR,IAAIC,EAAc,EAAKC,MAAMZ,QAAQ,EAAKY,MAAMR,kBAC5CS,EAAe,EAAKD,MAAMZ,QAAQU,GAElCI,EAAgB,EAAKC,iBAAiBJ,EAAaE,GAEvD,GAAKC,EAAL,CAKA,IAAIE,EAAe,YAAO,EAAKJ,MAAMZ,SAGrCgB,EAAgB9B,OAAOwB,EAAc,EAAGI,GAGxCE,EAAgB9B,OAAO,EAAK0B,MAAMR,iBAAkB,EAAG,EAAKa,uBAE5D,IAAIf,EAAiB,EAAKU,MAAMV,eAAiB,EACjD,EAAKH,SAAS,CACVG,eAAgBA,EAChBF,QAASgB,EACTX,aAAc,GACdC,aAAc,GACdF,iBAAkB,KAClBD,qBAAsB,OAGtBW,IAAkB,EAAKF,MAAMjB,OAC7B,EAAKuB,eACqB,IAAnBhB,GACP,EAAKiB,YA1GM,EA8GnBJ,iBAAmB,SAACJ,EAAaE,GAC7B,IAAIC,EACAT,EAEJ,OAAQ,EAAKO,MAAMT,sBACf,IAAK,IACDW,EAAgBH,EAAcE,EAC9B,MACJ,IAAK,IACGF,EAAcE,EACdC,EAAgBH,EAAcE,EAE9BR,EAAe,6BAEnB,MACJ,IAAK,IACDS,EAAgBH,EAAcE,EAC9B,MACJ,IAAK,IACGF,EAAcE,IAAiB,EAC/BC,EAAgBH,EAAcE,EAE9BR,EAAe,0BAEnB,MACJ,QACIA,EAAe,4BAmBvB,OAfIS,EAAgB,SAEhBT,EAAe,qBACfS,EAAgB,MAGhBT,GACA,EAAKN,SAAS,CACVM,aAAcA,EACdC,aAAc,GACdF,iBAAkB,KAClBD,qBAAsB,OAIvBW,GA3JQ,EA8JnBG,oBAAsB,WAClB,IAAIG,EAAY,EAAKR,MAAMd,gBAAgBuB,MAM3C,OAJ0C,IAAtC,EAAKT,MAAMd,gBAAgBf,QAC3B,EAAKuC,sBAGFC,OAAOH,IArKC,EAwKnBE,oBAAsB,WAClB,IAAIxB,EAGAA,EADA,EAAKc,MAAMX,MAAQ,EACD,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,IACtB,GAAK,EAAKW,MAAMX,OAAS,EAAKW,MAAMX,MAAQ,GACjC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,IAEd,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,KAEvCrB,EAAakB,GAEb,EAAKC,SAAS,CAACD,gBAAiBA,KApLjB,EAuLnBoB,aAAe,WACX,IAII/C,EACAD,EAWAsD,EATA,EAAKZ,MAAMX,MAAQ,IAAM,GAEzB9B,EAPY,GAFI,EASA,WAAKyC,MAAMX,MAAS,GACpC/B,EAPY,GAFI,GASA,WAAK0C,MAAMX,MAAS,KAEpC9B,EAVY,GAFI,EAYA,EAAKyC,MAAMX,MAC3B/B,EAVY,GAFI,GAYA,EAAK0C,MAAMX,OAK/B,GACIuB,EAAYvD,EAAcC,EAAKC,EAAK,SAC/B,EAAKyC,MAAMZ,QAAQH,SAAS2B,IAIrC,EAAKzB,SAAS,CACVE,MAAO,EAAKW,MAAMX,MAAQ,EAC1BN,OAAQ6B,EACRlB,aAAc,kBACdJ,eAAgB,EAAKU,MAAMV,eANd,KA9MF,EAwNnBiB,QAAU,WACN,EAAKpB,SAAS,CAACQ,UAAU,KAtNzB,EAAKK,MAAQ,CACTZ,QAAS,GACTF,gBAAiB,GACjBH,OAAQ,EACRM,MAAO,EACPC,eAAgB,EAChBC,qBAAsB,KACtBC,iBAAkB,KAClBC,aAAc,GACdC,aAAc,GACdC,UAAU,GAbC,E,gEAkBfkB,KAAK/B,gB,wCAyCSgB,GACVe,KAAKb,MAAML,WAEJG,IAAiBe,KAAKb,MAAMR,iBAEnCqB,KAAK1B,SAAS,CAACK,iBAAkB,OACS,MAAnCqB,KAAKb,MAAMT,sBAA+D,MAA/BsB,KAAKb,MAAMR,iBAE7DqB,KAAKhB,SAASC,GAGde,KAAK1B,SAAS,CAACK,iBAAkBM,O,2CAsJpBgB,GACbD,KAAKb,MAAML,WAIXmB,IAAcD,KAAKb,MAAMT,qBACzBsB,KAAK1B,SAAS,CAACI,qBAAsB,OACE,OAAhCsB,KAAKb,MAAMR,kBAClBqB,KAAK1B,SAAS,CAACI,qBAAsBuB,O,0CAKzCD,KAAK1B,SAAS,CAACI,qBAAsB,KAAMC,iBAAkB,S,+BAGvD,IAAD,OACL,OACI,yBAAKzF,UAAU,0BACX,yBAAKA,UAAU,oBACX,uBAAGA,UAAU,0BAAb,WACA,uBAAGA,UAAU,eAAe8G,KAAKb,MAAMjB,SAE3C,yBAAKhF,UAAU,wBACV8G,KAAKb,MAAMZ,QAAQ5D,KAAI,SAACuF,EAAQ3C,GAAT,OACpB,yBAAK4C,IAAK,cAAgB5C,EACtBrE,UAAU,aAAae,QAAS,WAAQ,EAAKmG,kBAAkB7C,IAC/D8C,YAAa9C,IAAU,EAAK4B,MAAMR,iBAAmB,OAAS,KAC9D2B,UAAWJ,EAAS,IAAM,OAAS,MAClCA,OAIb,yBAAKhH,UAAU,2BACX,yBAAKA,UAAU,gBACd8G,KAAKjB,WAAWpE,KAAI,SAACsF,EAAW1C,GAAZ,OACjB,yBAAK4C,IAAK,iBAAmB5C,EACzBrE,UAAU,gBAAgBe,QAAS,WAAQ,EAAKsG,qBAAqBN,IACrEI,YAAaJ,IAAc,EAAKd,MAAMT,qBAAuB,OAAS,MACrEuB,MAGT,yBAAK/G,UAAU,aAAae,QAAS,WAAO,EAAKuG,sBAAjD,WAIJ,yBAAKtH,UAAU,yBACX,yBAAKA,UAAU,cACX,qCAAW8G,KAAKb,MAAMX,OACtB,+CAAqBwB,KAAKb,MAAMV,iBAEpC,yBAAKgC,KAAkC,KAA5BT,KAAKb,MAAMP,aAAsB,OAAS,KAAM1F,UAAU,mBACjE,2BAAI8G,KAAKb,MAAMP,eAEnB,yBAAK6B,KAAkC,KAA5BT,KAAKb,MAAMN,aAAsB,OAAS,KAAM3F,UAAU,qBACjE,2BAAI8G,KAAKb,MAAMN,eAEnB,yBAAK4B,KAAMT,KAAKb,MAAML,SAAW,OAAS,KAAM5F,UAAU,qBACtD,6CACA,4BAAQA,UAAU,oBAAoBe,QAAS+F,KAAK/B,aAApD,sB,GAxREyC,IAAMC,W,oBCkBjBC,OAlBf,WAAoB,IAAD,EACe9G,mBAAS,IADxB,mBACV4B,EADU,KACAC,EADA,KAKjB,OAHAO,MAAM2E,MAAiB1E,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAE,GAAI,OAAIV,EAAYU,MAItE,6BACE,uBAAGnD,UAAU,cAAb,WACA,6BACE,kBAAC,GAAD,OAEF,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAeoD,OAAQZ,O,MC0BhBoF,OAzCf,YAAwD,IAA7BC,EAA4B,EAA5BA,gBAAiBC,EAAW,EAAXA,SAAW,EAEnBlH,mBAAS,GAFU,mBAE9CmH,EAF8C,KAEnCC,EAFmC,OAGTpH,oBAAS,GAHA,mBAG9CqH,EAH8C,KAG9BC,EAH8B,KAWjDC,GADW,IAAMJ,EATL,KAUkBK,WAAa,IAE3CN,IACFK,EAAqB,QAGvB,IAAIE,EAAgB,CAClBlI,gBAAiB,UACjBmI,MAAOH,EACPjI,OAAQ,QAcV,OAXAqI,qBAAU,WACRC,YAAW,WACLT,EAxBQ,IAyBVC,EAAaD,EAAY,IACfE,GAAmBH,IAC7BI,GAAkB,GAClBL,OAED,QAIH,yBAAM7H,UAAU,qBAAqBD,MA9BpB,CACjBI,gBAAiB,UACjBD,OAAQ,SA6BN,yBAAKH,MAAOsI,GAAZ,OCESI,OArCf,YAAmG,IAAzEC,EAAwE,EAAxEA,eAAgBC,EAAwD,EAAxDA,iBAAkBC,EAAsC,EAAtCA,mBAAoBC,EAAkB,EAAlBA,gBACxEC,EAAaJ,EAAeK,OAAOJ,GAEnCK,EAAa,CACbF,EAAWG,MAAM,EAAG,GACpBH,EAAWG,MAAM,EAAG,GACpBH,EAAWG,MAAM,EAAG,IACpBH,EAAWG,MAAM,GAAI,IACrBH,EAAWG,MAAM,KAGjBC,EAAcR,EAAetE,OAAS,EAE1C,OACI,yBAAK+E,GAAG,OAAOnJ,UAAU,oBAAoBoJ,YAAaF,GACrDF,EAAWvH,KAAI,SAAC4H,EAAKC,GAAN,OACZ,yBACIrC,IAAK,YAAcqC,EACnBH,GAAI,YAAcG,EAClBtJ,UAAU,wBACVuJ,OAAQD,EAAWJ,EAAc,OAAQ,MACxCG,EAAI5H,KAAI,SAAC+H,EAASC,GAAV,OACL,yBACIxC,IAAK,OAASqC,EAAW,IAAMG,EAC/BN,GAAI,OAASG,EAAW,IAAMG,EAC9BzJ,UAAU,wBACVe,QAAS,WAAK8H,EAAgBW,IAC9BrC,YAAayB,EAAmB1D,SAASsE,GAAW,OAAS,MAC5DA,YCbdE,OAhBf,YAGE,IAHkC,IAATC,EAAQ,EAARA,MACrBC,EAAQ,GAEH/E,EAAI,EAAGA,EAAI8E,EAAO9E,IACzB+E,EAAMpF,KAAK,SAGb,OACE,yBAAKxE,UAAU,sBACV4J,EAAMnI,KAAI,SAACoI,EAAMC,GAAP,OACP,yBAAK9J,UAAU,2BC8IZ+J,G,kDAlJX,WAAYxI,GAAQ,IAAD,uBACf,cAAMA,IAiBVsH,gBAAkB,SAACmB,GACf,KAAI,EAAK/D,MAAML,UACX,EAAKK,MAAMgE,cAAcC,QAAQF,IAAU,GAD/C,CAKA,IAAIG,EAAyB,EAAKlE,MAAM2C,mBAAmBsB,QAAQF,GAC/DG,GAA0B,EAC1B,EAAKlE,MAAM2C,mBAAmBrE,OAAO4F,EAAwB,GAE7D,EAAKlE,MAAM2C,mBAAmBpE,KAAKwF,GAGM,IAAzC,EAAK/D,MAAM2C,mBAAmBxE,QAC9BoE,YAAW,WAAM,EAAK4B,iBAAiB,KAG3C,EAAKhF,SAAS,CACVwD,mBAAoB,EAAK3C,MAAM2C,mBAC/ByB,QAAS,SArCE,EAoHnBC,aAAe,WACX,IAAIC,EAAe,EAAKtE,MAAMX,OAA8B,IAArB,EAAKW,MAAMX,MAAc,SAAW,WAE3E,EAAKF,SAAS,CACVwD,mBAAoB,GACpBhD,UAAU,EACVyE,QAAS,8BAAgCE,EAAe,kFAG5D,EAAKC,iBA1HL,IAAIC,EAAkBlJ,EAAMmJ,QAAQC,KAAK,GAH1B,OAIf1G,EAAawG,GAEb,EAAKxE,MAAQ,CACTwE,gBAAiBA,EACjBR,cAAe,GACfrB,mBAAoB,GACpBgC,WAAYrJ,EAAMmJ,QAClBL,SAAS,EACTzE,UAAU,EACVN,MAAO,EACPuF,eAAgB,GAdL,E,2DA0Cf,IAAIR,EACA/E,EAAQwB,KAAKb,MAAMX,MACnBsE,EAAQ9C,KAAKb,MAAM4E,eAEV/D,KAAKgE,4BAEdhE,KAAKiE,+BACLV,EAAU,WAEI,MADd/E,GAEIsE,EAAQ,EACRS,EAAU,uEACO,IAAV/E,IACPwB,KAAK0D,gBACLlF,IACA+E,EAAU,wGAGdA,EAAU,iCAENT,EAAQ,IAGM,MAFdA,EAGIS,EAAU,+BACO,IAAVT,EACPS,EAAU,iCACO,IAAVT,IACPS,EAAU,4GACVvD,KAAK0D,mBAMjB1D,KAAK1B,SAAS,CACVwD,mBAAoB,GACpByB,QAASA,EACT/E,MAAOA,EACPuF,eAAgBjB,M,iDAKpB,IAAK,IAAI/E,EAAI,EAAGA,EAAIiC,KAAKb,MAAM2E,WAAWxG,OAAQS,IAC9C,GAAIJ,GAAYqC,KAAKb,MAAM2C,mBAAoB9B,KAAKb,MAAM2E,WAAW/F,IACjE,OAAOiC,KAAKb,MAAM2E,WAAWrG,OAAOM,EAAG,GAI/C,OAAO,O,qDAIP,IAAK,IAAIA,EAAI,EAAGA,EAAIiC,KAAKb,MAAM2C,mBAAmBxE,OAAQS,IAAK,CAC3D,IAAImF,EAASlD,KAAKb,MAAM2C,mBAAmB/D,GAC3CiC,KAAKb,MAAMgE,cAAczF,KAAKwF,GAE9B,IAAIgB,EAAclE,KAAKb,MAAMwE,gBAAgBP,QAAQF,GACrDlD,KAAKb,MAAMwE,gBAAgBlG,OAAOyG,EAAa,M,sCAItC,IAAD,OACZxC,YAAW,WACP,EAAKpD,SAAS,CACV6E,cAAe,EAAKhE,MAAMgE,cAAclB,OAAO,EAAK9C,MAAM2E,WAAWD,QACrEF,gBAAiB,GACjBG,WAAY,GACZhF,UAAU,MAEf,O,+BAgBH,OACI,yBAAK5F,UAAU,+BACX,kBAAC,GAAD,CACI0I,eAAgB5B,KAAKb,MAAMgE,cAAetB,iBAAkB7B,KAAKb,MAAMwE,gBACvE7B,mBAAoB9B,KAAKb,MAAM2C,mBAAoBC,gBAAiB/B,KAAK+B,kBAC7E,yBAAK7I,UAAU,yBACX,kBAAC,GAAD,CAAkB2J,MAAO7C,KAAKb,MAAM4E,iBACpC,kBAAC,GAAD,CAAkB/C,SAAUhB,KAAKb,MAAML,SAAUiC,gBAAiBf,KAAKwD,gBAE3E,yBAAKtK,UAAU,4BACV8G,KAAKb,MAAMoE,c,GA5IF7C,IAAMC,WCoDrBwD,OAvDf,WAA2B,IA+BnBC,EA/BkB,EACMtK,mBAAS,MADf,mBACfuK,EADe,KACPC,EADO,KAGhBC,EAAU,CACZ,CAAC,OAAQ,QAAS,QAAS,aAC3B,CAAC,QAAS,UAAW,QAAS,eAC9B,CAAC,MAAO,UAAW,QAAS,SAC5B,CAAC,UAAW,UAAW,WAAY,WACnC,CAAC,OAAQ,cAAe,aAAc,eAGpCC,EAAU,CACZ,CAAC,WAAY,WAAY,QAAS,gBAClC,CAAC,cAAe,WAAY,YAAa,YACzC,CAAC,MAAO,cAAe,eAAgB,SACvC,CAAC,YAAa,SAAU,OAAQ,WAChC,CAAC,MAAO,KAAM,OAAQ,QAWpBC,EAAc,SAACJ,GACjBC,EAAUD,IAmBd,OAbID,EADAC,EACU,kBAAC,GAAD,CAAiBT,QAASS,IAE1B,yBAAKnL,UAAU,2BACrB,uBAAGA,UAAU,4BAAb,4BACA,uBAAGA,UAAU,2BAAb,oFACA,yBAAKA,UAAU,8BACX,4BAAQA,UAAU,4BAA4Be,QAAS,WAAKwK,EAAYF,KAAxE,YACA,4BAAQrL,UAAU,4BAA4Be,QAAS,WAAKwK,EAAYD,KAAxE,cAOR,yBAAKtL,UAAU,8BACVkL,I,oBC/BEM,OAjBf,WAAwB,IAAD,EACW5K,mBAAS,IADpB,mBACd4B,EADc,KACJC,EADI,KAIrB,OAFAO,MAAMyI,MAAqBxI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAE,GAAI,OAAIV,EAAYU,MAG1E,6BACE,uBAAGnD,UAAU,cAAb,qBACA,6BACE,kBAAC,GAAD,OAEF,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAeoD,OAAQZ,OCbzBkJ,I,MAAkB,CACpB,IACA,IACA,IACA,MAyCWC,OAtCf,YAA6G,IAA1EC,EAAyE,EAAzEA,gBAAgBC,EAAyD,EAAzDA,kBAAmBC,EAAsC,EAAtCA,WAAYC,EAA0B,EAA1BA,cAAeC,EAAW,EAAXA,SAC7F,SAASC,EAAmBjC,GACxB,QAAK8B,IAEM9B,IAAW4B,EAAgBM,eAAiBlC,IAAW4B,EAAgBO,kBAOtF,OACI,yBAAKnM,UAAU,8BACX,yBAAKA,UAAU,kCACV4L,EAAgBQ,UAErB,yBAAKpM,UAAU,gCAAgCqM,cAAeN,GACzDH,EAAgBlB,QAAQjJ,KAAI,SAACuI,EAAQgB,GAAT,OACzB,yBACI/D,IAAK,sBAAwB+D,EAC7BhL,UAAU,qBACVsM,WAAYL,EAAmBjC,GAAU,OAAS,KAClD7C,YAAa6C,IAAW6B,EAAoB,OAAS,KACrD9K,QAAS,WAAOiL,EAAShC,KACzB,yBAAKhK,UAAU,6BACV0L,GAAgBV,GADrB,KAGA,yBAAKhL,UAAU,2BACVgK,UCtChBuC,GAAa,CACtB,UACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,YACA,YACA,YACA,aAGSC,GACG,QADHA,GAEH,WAFGA,GAGH,cAHGA,GAIH,OAGGC,GACH,GADGA,GAEA,WAFAA,GAGA,kBAHAA,GAIC,WAJDA,GAKH,SALGA,GAMK,OANLA,GAOO,aAGPV,GACC,WADDA,GAEA,UAFAA,GAGE,YCNAW,OAzBf,YAAuF,IAArDrC,EAAoD,EAApDA,QAASsC,EAA2C,EAA3CA,gBAAiBC,EAA0B,EAA1BA,cAAeZ,EAAW,EAAXA,SACvE,OACI,yBAAKhM,UAAU,6BACX,yBAAKA,UAAU,2BACVqK,GAEL,yBAAKrK,UAAU,uBACX,4BACIA,UAAU,2BACV6M,WAAYF,IAAoBF,GAAoB,OAAS,KAC7D1L,QAAS,WAAOiL,EAASW,KACxBA,GAEL,4BACI3M,UAAU,yBACV6M,WAAYD,IAAkBH,GAAoB,OAAS,KAC3D1L,QAAS,WAAOiL,EAASY,KACxBA,MC2BNE,OA5Cf,YAAuF,IAAxDC,EAAuD,EAAvDA,kBAAmBC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,aAAcjB,EAAW,EAAXA,SACvE,OACI,yBAAKhM,UAAU,0BACX,yBAAKA,UAAU,yBACVgN,EAAUvL,KAAI,SAACyL,EAAUC,GAAX,OACX,4BACIlG,IAAK,yBAA2BkG,EAChCnN,UAAU,uBACVoN,aAA2B,KAAbF,EAAkB,OAAS,KACzCnM,QAAS,WAAOiL,EAASkB,KACxBA,OAIb,yBAAKlN,UAAU,6BACVuM,GAAW9K,KAAI,SAAC4L,EAAQC,GAAT,OACZ,yBACIrG,IAAK,sBAAwBqG,EAC7BtN,UAAU,qBACVuN,WAAYD,EAAc,IAAM,EAAI,OAAS,KAC7CE,aAAcT,IAAsBO,EAAc,OAAS,MAC3D,yBAAKtN,UAAU,4BACVsN,EAAc,GAEnB,6BACKD,QAKjB,yBAAKrN,UAAU,yBACX,4BACIA,UAAU,yBACV6M,WAAaI,EAAwB,KAAT,OAC5BlM,QAAS,WAAOiL,EAASQ,MAH7B,gBCsRDiB,G,kDAjTX,WAAYlM,GAAQ,IAAD,8BACf,cAAMA,IAoBVmM,kBAAoB,SAAC1D,GACb,EAAK/D,MAAM0G,kBAAoBF,IAC/B,EAAKxG,MAAM0G,kBAAoBF,KAI/BzC,IAAW,EAAK/D,MAAM4F,kBACtB,EAAKzG,SAAS,CACVyG,kBAAmB,KACnBxB,QAAS,KACTsC,gBAAiBF,GACjBG,cAAeH,KAGnB,EAAKrH,SAAS,CACVyG,kBAAmB7B,EACnBK,QAAS,gBACTsC,gBAAiBF,GACjBG,cAAeH,OAvCR,EA4CnBkB,YAAc,WACN,EAAK1H,MAAM2H,cACX,EAAKxI,SAAS,CACViF,QAAS,kBACTwB,kBAAmB,KACnBc,gBAAiBF,GACjBG,cAAeH,KAGnB,EAAKrH,SAAS,CACViF,QAAS,2CACTwB,kBAAmB,KACnBc,gBAAiBF,GACjBG,cAAeH,MAzDR,EA+DnBoB,aAAe,WACX,IAAI3B,EAAgB,EAAK4B,UAAU,EAAK7H,MAAM8H,eAAe7B,cAE7D,GAAI,EAAKjG,MAAM4F,oBAAsBK,EAAe,CAChD,IAAI8B,EAAkB,EAAK/H,MAAM+H,gBAC7BC,EAAa,EAAKhI,MAAMgI,WAEvB,EAAKhI,MAAM2H,eAAiB,EAAK3H,MAAM8H,cAAgB,IAAM,IAC9DC,EAAkB,EAAK/H,MAAM8H,eAGjC,IAAI1D,EAAW,4CACX6D,EAAoB,EAAKjI,MAAM8H,gBAAkB,EAAKD,UAAU1J,OAAS,EACzE8J,IAAqB,EAAKjI,MAAM2H,eAChCK,IACA5D,EAAU,qDACH6D,IACP7D,EAAU,6BAGd,EAAKjF,SAAS,CACViF,QAASA,EACT2D,gBAAiBA,EACjBrB,gBAAiBF,GACjBG,cAAeH,GACfwB,WAAYA,EACZlC,cAAeA,GACfoC,cAAgBD,IAAqB,EAAKjI,MAAM2H,oBAEjD,CACH,IAAIQ,EAAa3B,GAEZ,EAAKxG,MAAM2H,gBACZQ,EAAa3B,IAGjB,EAAKrH,SAAS,CACViF,QAAS,4DAA8D6B,EAAgB,IACvF0B,eAAe,EACfjB,gBAAiByB,EACjBxB,cAAeH,GACfV,cAAeA,GACfoC,cAAc,MAzGP,EA8GnBE,yBAA2B,WACvB,EAAKjJ,SAAS,CACV6I,WAAY,EAAKhI,MAAM+H,kBAG3B,EAAKM,gCAnHU,EAsHnBC,WAAa,SAAClK,GACV,IAAImK,EAAS,WAMb,OAJInK,GAAS,IACTmK,EAASjC,GAAWlI,IAGjBmK,GA7HQ,EAgInBF,6BAA+B,WAC3B,EAAKlJ,SAAS,CACViF,QAAS,WAAa,EAAKkE,WAAW,EAAKtI,MAAM+H,iBAAmB,uEACpErB,gBAAiBF,MAnIN,EAuInBgC,kBAAoB,WAChB,IAAIV,EAAgB,EAAK9H,MAAM8H,cAAgB,EAE/C,GAAIA,IAAkB,EAAKD,UAAU1J,OACjC,EAAKgB,SAAS,CACViF,QAAS,uCAAyC,EAAKkE,WAAW,EAAKtI,MAAM+H,iBAAmB,wBAChGrB,gBAAiBF,GACjBG,cAAeH,SAEhB,CACH,IAAIwB,EAAa,EAAKhI,MAAMgI,WAEvB,EAAKhI,MAAM2H,eACZK,IAGJ,EAAK7I,SAAS,CACV2I,cAAeA,EACfE,WAAYA,EACZ5D,QAAS,KACTsC,gBAAiBF,GACjBG,cAAeH,GACfZ,kBAAmB,KACnBE,cAAeA,GACfD,YAAY,MA/JL,EAoKnB4C,mBAAqB,WACb,EAAKzI,MAAM0G,kBAAoBF,IAC/B,EAAKxG,MAAM0G,kBAAoBF,KAInC,EAAKrH,SAAS,CACViF,QAAS,4CACTyB,YAAY,IAGhB,EAAK6C,gBAAgBnC,MA/KN,EAkLnBoC,YAAc,SAACC,GACX,GAAI,EAAK5I,MAAM0G,kBAAoBF,IAC/B,EAAKxG,MAAM0G,kBAAoBF,GADnC,CAMA,IAAIpC,EADJyE,QAAQC,IAAIF,GAEZ,IAAIjD,EAAkB,EAAKkC,UAAU,EAAK7H,MAAM8H,eAE5C1D,EADAwE,IAAWrC,GACD,cAAgBZ,EAAgBoD,KAEhC,iBAAmBpD,EAAgBqD,KAGjD,EAAK7J,SAAS,CAACiF,QAASA,IACxB,EAAKsE,gBAAgBE,KAlMN,EAqMnBF,gBAAkB,SAACzB,GACf,IAAI7I,EAAQ,EAAK4B,MAAM+G,UAAU9C,QAAQgD,GACzC,EAAKjH,MAAM+G,UAAU3I,GAAS,IAvMf,EA0MnB6K,eAAiB,WACb,EAAK9J,SAAS,CACViF,QAAS,2CAA6C,EAAKkE,WAAW,EAAKtI,MAAMgI,YAAc,IAC/FtB,gBAAiBF,GACjBG,cAAeH,MA9MJ,EAkNnB0C,gBAAkB,WACd,EAAK/J,SAAS,CACVwI,eAAe,EACfI,gBAAiB,EAAK/H,MAAMgI,WAC5B5D,QAAS,WAAa,EAAKkE,WAAW,EAAKtI,MAAMgI,YAAc,qDAC/DtB,gBAAiBF,GACjBG,cAAeH,GACf0B,cAAc,KAzNH,EA6NnBiB,eAAiB,WACb,EAAKhK,SAAS,CACViF,QAAS,aACTsC,gBAAiBF,GACjBZ,kBAAmB,KACnBe,cAAeH,MAlOJ,EAsOnB4C,kBAAoB,SAACR,GACjB,OAAQA,GACJ,KAAKpC,GACD,EAAKoB,eACL,MACJ,KAAKpB,GACD,EAAKkB,cACL,MACJ,KAAKlB,GACD,EAAK4B,2BACL,MACJ,KAAK5B,GACD,EAAKgC,oBACL,MACJ,KAAKhC,GACD,EAAK0C,kBACL,MACJ,KAAK1C,GACD,EAAK2C,mBAxPE,EA+PnBE,iBAAmB,SAACT,GAChB,OAAQA,GACJ,KAAKrC,GACD,EAAKkC,qBACL,MACJ,KAAKlC,GACL,KAAKA,GACD,EAAKoC,YAAYC,GACjB,MACJ,KAAKrC,GACD,EAAK0C,mBAtQb,EAAKpB,UAAYvM,EAAMmJ,QAEvB,EAAKzE,MAAQ,CACToE,QAAS,kCACT0D,cAAe,EACfE,YAAa,EACbjB,UAAW,CAACR,GAAwBA,GAAkBA,IACtDoB,eAAe,EACfI,iBAAkB,EAClBnC,kBAAmB,KACnBc,gBAAiBF,GACjBG,cAAeH,GACfV,cAAeA,GACfD,YAAY,EACZqC,cAAc,GAjBH,E,qDAiRf,OACI,yBAAKnO,UAAU,8BACX,yBAAKA,UAAU,0BACX,kBAAC,GAAD,CACI4L,gBAAiB9E,KAAKgH,UAAUhH,KAAKb,MAAM8H,eAC3ClC,kBAAmB/E,KAAKb,MAAM4F,kBAC9BE,cAAejF,KAAKb,MAAM8F,cAC1BD,WAAYhF,KAAKb,MAAM6F,WACvBE,SAAUlF,KAAK4G,oBAEnB,kBAAC,GAAD,CACI9B,gBAAiB9E,KAAKgH,UAAUhH,KAAKb,MAAM8H,eAC3ClC,kBAAmB/E,KAAKb,MAAM4F,kBAC9BE,cAAejF,KAAKb,MAAM8F,cAC1BD,WAAYhF,KAAKb,MAAM6F,WACvBzB,QAASvD,KAAKb,MAAMoE,QACpBsC,gBAAiB7F,KAAKb,MAAM0G,gBAC5BC,cAAe9F,KAAKb,MAAM2G,cAC1BZ,SAAUlF,KAAKuI,qBAGvB,kBAAC,GAAD,CACItC,kBAAmBjG,KAAKb,MAAMgI,WAC9BjB,UAAWlG,KAAKb,MAAM+G,UACtBC,aAAcnG,KAAKb,MAAMkI,aACzBnC,SAAUlF,KAAKwI,wB,GA3SL9H,IAAMC,WCPvB8H,GAAa,CACtB,CACInD,SAAU,6DACV1B,QAAS,CACL,WACA,WACA,WACA,eAEJwB,cAAe,WACf8C,KAAM,KACNC,KAAM,kFACN9C,iBAAkB,eAEtB,CACIC,SAAU,wDACV1B,QAAS,CACL,WACA,QACA,SACA,cAEJwB,cAAe,WACf8C,KAAM,2BACNC,KAAM,6LACN9C,iBAAkB,cAEtB,CACIC,SAAU,+CACV1B,QAAS,CACL,eACA,WACA,eACA,cAGJwB,cAAe,WACf8C,KAAM,gBACNC,KAAM,iDACN9C,iBAAkB,cAEtB,CACIC,SAAU,gFACV1B,QAAS,CACL,KACA,eACA,aACA,WAEJwB,cAAe,eACf8C,KAAM,eACNC,KAAM,4GACN9C,iBAAkB,WAEtB,CACIC,SAAU,iEACV1B,QAAS,CACL,WACA,eACA,UACA,YAEJwB,cAAe,WACf8C,KAAM,kBACNC,KAAM,qEACN9C,iBAAkB,gBAEtB,CACIC,SAAU,iEACV1B,QAAS,CACL,MACA,QACA,OACA,QAEJwB,cAAe,OACf8C,KAAM,qBACNC,KAAM,iIACN9C,iBAAkB,OAEtB,CACIC,SAAU,6CACV1B,QAAS,CACL,WACA,eACA,iBACA,YAEJwB,cAAe,WACf8C,KAAM,2BACNC,KAAM,iIACN9C,iBAAkB,YAEtB,CACIC,SAAU,4EACV1B,QAAS,CACL,OACA,SACA,WACA,YAEJwB,cAAe,WACf8C,KAAM,8BACNC,KAAM,oJACN9C,iBAAkB,YAEtB,CACIC,SAAU,mGACV1B,QAAS,CACL,QACA,OACA,cACA,mBAEJwB,cAAe,QACf8C,KAAM,iBACNC,KAAM,6EACN9C,iBAAkB,QAEtB,CACIC,SAAU,wFACV1B,QAAS,CACL,mBACA,sBACA,cACA,eAEJwB,cAAe,mBACf8C,KAAM,yBACNC,KAAM,4GACN9C,iBAAkB,eAEtB,CACIC,SAAU,wDACV1B,QAAS,CACL,SACA,SACA,UACA,WAEJwB,cAAe,SACf8C,KAAM,UACNC,KAAM,sFACN9C,iBAAkB,WAEtB,CACIC,SAAU,+DACV1B,QAAS,CACL,UACA,UACA,WACA,aAEJwB,cAAe,WACf8C,KAAM,4BACNC,KAAM,gKACN9C,iBAAkB,YC3HXqD,OA5Bf,WAA2B,IAOnBtE,EAPkB,EACMtK,mBAAS,MADf,mBACfuK,EADe,KACPC,EADO,KAoBtB,OAVIF,EADAC,EACU,kBAAC,GAAD,CAAiBT,QAASS,IAE1B,yBAAKnL,UAAU,0BACrB,uBAAGA,UAAU,2BAAb,+BACA,uBAAGA,UAAU,0BAAb,gFACA,yBAAKA,UAAU,6BACX,4BAAQA,UAAU,2BAA2Be,QAAS,YAb9C,SAACoK,GACjBC,EAAUD,GAYyDI,CAAYgE,MAAvE,WAKR,yBAAKvP,UAAU,6BACVkL,I,oBCLEuE,OAjBf,WAAwB,IAAD,EACW7O,mBAAS,IADpB,mBACd4B,EADc,KACJC,EADI,KAIrB,OAFAO,MAAM0M,MAAqBzM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAE,GAAI,OAAIV,EAAYU,MAG1E,6BACE,uBAAGnD,UAAU,cAAb,kCACA,6BACE,kBAAC,GAAD,OAEF,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAeoD,OAAQZ,O,OCChBmN,OAff,SAAiBpO,GACf,OACE,yBACI0F,IAAK,OAAS1F,EAAMqO,IAAIvG,IAAM,IAAM9H,EAAMqO,IAAIvL,MAC9C8E,GAAI,OAAS5H,EAAMqO,IAAIvG,IAAM,IAAM9H,EAAMqO,IAAIvL,MAC7CrE,UAAU,UACV6P,SAAUtO,EAAMqO,IAAI3J,OACpB,8BAAO1E,EAAMqO,IAAIE,OACjB,yBAAK9P,UAAU,aAAa+P,QAAQ,eAClC,8BAAU1C,OAAO,kDCPrB2C,GACK,QADLA,GAEQ,WAFRA,GAGM,SAHNA,GAIQ,WAJRA,GAKU,aALVA,GAMM,SAsTGC,G,kDAlTX,WAAY1O,GAAQ,IAAD,8BACf,cAAMA,IAED0E,MAAQ,CACTX,MAAO,EACP4K,iBAAiB,EACjBC,WAAY,EACZC,UAAW,EAAKC,oBAChBC,aAAc,KACdC,KAAM,EAAKC,cATA,E,yDAcf,IAAID,EAAO,GAEXA,EAAK/L,KAAKsC,KAAK2J,UAAU,EAAG,EAAG,IAC/BF,EAAK/L,KAAKsC,KAAK2J,UAAU,EAAG,EAAG,IAC/BF,EAAK/L,KAAKsC,KAAK2J,UAAU,EAAG,EAAG,IAC/BF,EAAK/L,KAAKsC,KAAK2J,UAAU,EAAG,EAAG,IAC/BF,EAAK/L,KAAKsC,KAAK2J,UAAU,EAAG,EAAG,IAC/BF,EAAK/L,KAAKsC,KAAK2J,UAAU,EAAG,EAAG,IAC/BF,EAAK/L,KAAKsC,KAAK2J,UAAU,EAAG,EAAG,IAC/BF,EAAK/L,KAAKsC,KAAK2J,UAAU,EAAG,EAAG,IAC/BF,EAAK/L,KAAKsC,KAAK2J,UAAU,EAAG,EAAG,IAE/B,IAAIC,EAAYH,EAAM,GAAG,GAIzB,OAHAG,EAAUZ,MAAQ,EAClBY,EAAUzK,MAAQ+J,GAEXO,I,gCAGDI,EAAWC,EAAYxM,GAG7B,IAFA,IAAIiF,EAAM,GAEDxE,EAAI,EAAGA,EAAIT,EAAQS,IACxBwE,EAAI7E,KAAKsC,KAAK+J,UAAUF,EAAW9L,EAAI+L,IAG3C,OAAOvH,I,gCAGDA,EAAKhF,GAQX,MAPU,CACNyL,MAAO,KACP7J,MAAO+J,GACP3G,IAAKA,EACLhF,MAAOA,K,sCAMCuL,GACP9I,KAAKb,MAAMiK,iBAAmBN,EAAI3J,QAAU+J,GAQtCJ,EAAI3J,QAAU+J,KAErBJ,EAAIE,MAAQhJ,KAAKb,MAAMmK,UAAUtJ,KAAKb,MAAMqK,cAC5CV,EAAI3J,MAAQ+J,GACZlJ,KAAKgK,YACLhK,KAAKiK,gBAXLnB,EAAI3J,MAAQ+J,GACZlJ,KAAK1B,SAAS,CACVE,MAAOwB,KAAKb,MAAMX,MAAQsK,EAAIE,MAC9BI,iBAAiB,IAErBpJ,KAAKiK,iB,kCAUDC,GACR,IAAK,IAAI1H,EAAW,EAAGA,EAAWxC,KAAKb,MAAMsK,KAAKnM,OAAQkF,IACtD,IAAK,IAAI2H,EAAW,EAAGA,EAAWnK,KAAKb,MAAMsK,KAAKjH,GAAUlF,OAAQ6M,IAAY,CAC5E,IAAIrB,EAAM9I,KAAKb,MAAMsK,KAAKjH,GAAU2H,GAEpC,OAAQrB,EAAI3J,OACR,KAAK+J,GAEoB,OAAjBgB,GACAlK,KAAKoK,qBAAqBtB,EAAKoB,GAEnC,MACJ,KAAKhB,QACoBmB,IAAjBH,IAEApB,EAAI3J,MAAQ+J,IAEhB,MACJ,KAAKA,GAEDlJ,KAAKsK,qBAAqBxB,GAC1B,MACJ,KAAKI,GAEDJ,EAAI3J,MAAQ+J,O,2CASXJ,GACjB,IAAIyB,EAAUvK,KAAKwK,iBAAiB1B,GAEpC,GAAIyB,EAAQjN,OAAS,EAEjBwL,EAAI3J,MAAQ+J,OAFhB,CAMA,IAAK,IAAInL,EAAI,EAAGA,EAAIwM,EAAQjN,OAAQS,IAChC,GAAIwM,EAAQxM,GAAGoB,QAAU+J,IAAmBqB,EAAQxM,GAAGoB,QAAU+J,GAE7D,OAIJlJ,KAAKb,MAAMiK,gBACXN,EAAI3J,MAAQ+J,GAEZJ,EAAI3J,MAAQ+J,M,2CAICJ,EAAKoB,GACtB,GAAqB,IAAjBA,EAAJ,CAMA,IAAIO,EAAkBzK,KAAK0K,mBAAmB5B,GACzB,IAAjBoB,EAQoB,OAApBO,GAA4BP,GAAgBO,IAE5C3B,EAAI3J,MAAQ+J,IARY,OAApBuB,IACA3B,EAAI3J,MAAQ+J,SARhBJ,EAAI3J,MAAQ+J,K,yCAmBDJ,GAIf,IAHA,IAAI6B,EAAW3K,KAAKwK,iBAAiB1B,GACjC2B,EAAkB,KAEb1M,EAAI,EAAGA,EAAI4M,EAASrN,OAAQS,IAAK,CACtC,IAAI6M,EAASD,EAAS5M,GAED,OAAjB6M,EAAO5B,QAGPyB,EAAkB3N,KAAKL,IAAImO,EAAO5B,MAAOyB,IAIjD,OAAOA,I,uCAGMI,GACb,IAaI9M,EAbA4M,EAAW,GAYXG,EAAU9K,KAAKb,MAAMsK,KAAKoB,EAAUtI,KAExC,IAAKxE,EAAI,EAAGA,EAAI+M,EAAQxN,OAAQS,IAAK,CACjC,IAAIgN,EAAaD,EAAQ/M,IAErBgN,EAAWxN,QAAUsN,EAAUtN,MAAQ,GAEhCwN,EAAWxN,QAAUsN,EAAUtN,MAAQ,IAD9CoN,EAASjN,KAAKqN,GAOtB,GAAsB,IAAlBF,EAAUtI,IAAW,CACrB,IAAIyI,EAAWhL,KAAKb,MAAMsK,KAAKoB,EAAUtI,IAAM,GAE/C,IAAKxE,EAAI,EAAGA,EAAIiN,EAAS1N,OAAQS,IAAK,CAClC,IAAIkN,EAAcD,EAASjN,IAEvBkN,EAAY1N,QAAUsN,EAAUtN,MAAQ,GAEjC0N,EAAY1N,QAAUsN,EAAUtN,QADvCoN,EAASjN,KAAKuN,IAQ1B,GAAIJ,EAAUtI,MAAQvC,KAAKb,MAAMsK,KAAKnM,OAAS,EAAG,CAC9C,IAAI4N,EAAWlL,KAAKb,MAAMsK,KAAKoB,EAAUtI,IAAM,GAE/C,IAAKxE,EAAI,EAAGA,EAAImN,EAAS5N,OAAQS,IAAK,CAClC,IAAIoN,EAAcD,EAASnN,IAEvBoN,EAAY5N,QAAUsN,EAAUtN,OAEzB4N,EAAY5N,QAAUsN,EAAUtN,MAAQ,IAD/CoN,EAASjN,KAAKyN,IAO1B,OAAOR,I,uCAGMpN,GACiB,IAA1ByC,KAAKb,MAAMkK,aAIfrJ,KAAKiK,YAAYjK,KAAKb,MAAMmK,UAAU/L,IACtCyC,KAAK1B,SAAS,CAACkL,aAAcjM,O,kCAI7ByC,KAAKb,MAAMmK,UAAUtJ,KAAKb,MAAMqK,cAAgB,KAChDxJ,KAAK1B,SAAS,CACVkL,aAAc,KACdH,WAAY+B,SAASpL,KAAKb,MAAMkK,YAAc,M,0CAQlD,IAHA,IAAIgC,EAAW,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,IAC7BC,EAAe,GAEVvN,EAAI,EAAGA,EAAIsN,EAAS/N,OAAQS,IAAK,CACtC,IAAIwN,EAAUF,EAAStN,GACnByN,EAAa1O,KAAKI,KAAKJ,KAAKG,SAAWsO,GAC5B,IAAXA,GACAC,IAEJF,EAAa5N,KAAK8N,GAGtB,OAAOF,I,iCAIP,KAAItL,KAAKb,MAAMkK,WAAa,GAA5B,CAIArJ,KAAKiK,cAEL,IAAIqB,EAAetL,KAAKuJ,oBAExBvJ,KAAK1B,SAAS,CACVgL,UAAWgC,EACXjC,WAAY,EACZD,iBAAiB,O,+BAIf,IAAD,OACL,OACI,yBAAKlQ,UAAU,+BACX,0BAAMA,UAAU,SAAhB,gBAAsC8G,KAAKb,MAAMX,OACjD,yBAAK6D,GAAG,OAAOnJ,UAAU,QACpB8G,KAAKb,MAAMsK,KAAK9O,KAAI,SAAC4H,EAAKhF,GAAN,OACjB,yBAAK4C,IAAK,OAAS5C,EAAOrE,UAAU,OAC/BqJ,EAAI5H,KAAI,SAACmO,EAAK2C,GAAN,OAAgB,yBAAKxR,QAAS,WAAQ,EAAKyR,gBAAgB5C,KAChE,kBAAC,GAAD,CAASA,IAAKA,aAM9B,yBAAKzG,GAAG,QAAQnJ,UAAU,SACrB8G,KAAKb,MAAMmK,UAAU3O,KAAI,SAACgR,EAAMpO,GAAP,OACtB,yBAAK4C,IAAK,WAAa5C,EACnB8E,GAAI,WAAa9E,EACjBrE,UAAU,UAAUe,QAAS,WAAQ,EAAK2R,iBAAiBrO,IAC3D8C,YAAa9C,IAAU,EAAK4B,MAAMqK,aAAe,OAAS,MACzDmC,MAGT,4BAAQzS,UAAU,aAAae,QAAS,WAAO,EAAK4R,aAC/C7L,KAAKb,MAAMkK,WAAa,EAAI,SAAWrJ,KAAKb,MAAMkK,WAAa,e,GA3S1D3I,IAAMC,W,gKC2BrBmL,OA5Bf,WAAwB,IAAD,EACWhS,mBAAS,IADpB,mBACd4B,EADc,KACJC,EADI,KAerB,OAbAO,MAAM6P,MAAqB5P,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAE,GAAI,OAE5D,SAA+BA,GAO7BA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,EAAOA,EAAK2P,QAAQ,cAAeC,OACvBD,QAAQ,wBAAyBE,OACjCF,QAAQ,wBAAyBG,OACjCH,QAAQ,gBAAiBI,OACzBJ,QAAQ,gBAAiBK,OACzBL,QAAQ,gBAAiBM,OACzBN,QAAQ,qBAAsBO,MAC1C5Q,EAAYU,GAVkDmQ,CAAsBnQ,MAcpF,6BACE,uBAAGnD,UAAU,cAAb,gBACA,6BACE,kBAAC,GAAD,OAEF,yBAAKA,UAAU,gBACb,kBAAC,IAAD,CAAeoD,OAAQZ,OCFhB+Q,OAvBf,WAAgC,IACxB1R,EAASS,cAATT,KAEA2R,EAAQ,CACZ,QAAW,kBAAC,GAAD,MACX,eAAgB,kBAAC,GAAD,MAChB,eAAgB,kBAAC,GAAD,MAChB,YAAe,kBAAC,GAAD,OAGbtI,EAAU,0DAAgCrJ,EAAhC,mBAMd,OAJmB,MAAf2R,EAAM3R,KACRqJ,EAAUsI,EAAM3R,IAIhB,yBAAK7B,UAAU,gBACVkL,I,oBCXMuI,OAbf,WACE,OACE,yBAAKzT,UAAU,gBACb,uBAAGA,UAAU,cAAb,WACA,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,mBAAmBkB,IAAKwS,KAActS,IAAI,eACzD,8GACA,wD,OCyCOuS,OAlCf,WACE,OACE,yBAAK3T,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAQ4T,SAAUC,aAChB,kBAAC,EAAD,MACA,yBAAK7T,UAAU,gBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8T,OAAK,EAACC,KAAK,gBAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,sBACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,kBAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,wBACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UAKR,kBAAC,EAAD,QCzCNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,U,6DCT1B7U,EAAOC,QAAU,IAA0B,6C,wCCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,gD,mBCA3CD,EAAOC,QAAU,IAA0B,iD,mBCA3CD,EAAOC,QAAU,IAA0B,iD,mBCA3CD,EAAOC,QAAU,IAA0B,iD,mBCA3CD,EAAOC,QAAU,IAA0B,wD,mBCA3CD,EAAOC,QAAU,IAA0B,wD,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.0b6eeb45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Pyxis.c67cadf1.jpg\";","import React from 'react';\nimport './Header.css';\nimport Background from \"../assets/Background.jpeg\"\n\nconst backgroundStyle = {\n  backgroundImage: `url(${Background})`,\n  backgroundSize: 'cover',\n  backgroundPosition: 'left'\n}\n\nfunction Header() {\n  return (\n    <header>\n      <div style={backgroundStyle} className=\"header-content\">\n        <p className=\"header-title\">\n          Game Design Portfolio\n        </p>\n        <p className=\"header-subtitle\">\n          By Philip Tootill\n        </p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nconst footerStyle = {\n  height: '50px',\n  backgroundColor: '#737373',\n  color: 'white',\n  fontWeight: 'bold',\n  flexShrink: '0',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center'\n}\n\nfunction Footer() {\n  return (\n    <footer style={footerStyle}>\n      <p>\n        Designed by Philip Tootill\n      </p>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, {useState} from 'react';\nimport './Menu.css';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { Link } from 'react-router-dom';\n\nfunction Menu() {\n  const [open, setOpen] = useState(false);\n\n  return(\n    <div className=\"menu\">\n      <button onClick={function() {setOpen(!open)}} className=\"menu-button\">\n        <MenuIcon/>\n      </button>\n      <ul className=\"menu-list\" open={open}>\n        <li className=\"menu-list-item\">\n          <Link to=\"/about\">About</Link>\n        </li>\n        <li className=\"menu-list-item\">\n          <Link to=\"/board-games\">Board Games</Link>\n        </li>\n        <li className=\"menu-list-item\">\n          <Link to=\"/digital-games\">Digital Games</Link>\n        </li>\n        <li className=\"menu-list-item\">\n          <Link to=\"/digital-games/millionaire\">Quiz Round</Link>\n        </li>\n        <li className=\"menu-list-item\">\n          <Link to=\"/contact\">Contact</Link>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Menu;\n","import React from 'react';\nimport './Page.css';\nimport pyxisPhoto from '../assets/Pyxis.jpg';\nimport internsPhoto from '../assets/InternsOfHades.jpeg';\n\nfunction About() {\n  return (\n    <div className=\"page-content\">\n      <p className=\"page-title\">About</p>\n      <div className=\"page-section\">\n        <img className=\"page-inlay-image\" src={pyxisPhoto} alt=\"Prototype of Pyxis\"/> \n        <p>\n          I'm an Oxford based software developer and amateur game designer. \n          I made this site using React to showcase my game designs. \n          The code for the site is available <a href=\"https://github.com/PhilipTootill/HomePage\">here</a>.\n        </p>\n        <p>\n          I started designing games in 2014, after seeing Matt Leacock give a talk about game design at the UK Games Expo.\n          Since then, I've worked on a range of different games, and had one game published: Labyrinth, as part of the collection <a href=\"https://jellybean.games/the-lady-and-the-tiger/\">The Lady and the Tiger</a>.\n        </p>\n        <p>\n          Under \"Board Games\", you'll find summaries of the projects I'm most proud of, and sell sheets for the games which are in a pitchable condition.\n        </p>\n        <p>\n          I also have a handful of digital prototypes, under \"Digital Games\".\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default About;\n","import React from 'react';\nimport './Header.css';\nimport { Link } from 'react-router-dom';\n\nfunction LinkBoxes(props) {\n  return (\n    <div className=\"link-boxes\">\n      {\n        props.links.map((link) =>\n          <div className=\"link-box\" style={{backgroundImage: `url(${link.image})`}}>\n            <Link to={link.url}>\n              <div className=\"link-box-overlay\">{link.name}</div>\n            </Link>\n          </div>\n        )\n      }\n    </div>\n  );\n}\n\nexport default LinkBoxes;\n","import React from 'react';\nimport HeraklesImage from '../../assets/Herakles.jpg';\nimport PyxisImage from '../../assets/Pyxis.jpg';\nimport TheVinylAgeImage from '../../assets/TheVinylAge.jpg';\nimport InternsOfHadesImage from '../../assets/InternsOfHades.jpeg';\nimport RulesIncImage from '../../assets/RulesInc.jpg';\nimport LinkBoxes from '../../components/LinkBoxes';\n\nconst games = [\n  {\n    \"name\": \"Pyxis\",\n    \"image\": PyxisImage,\n    \"url\": \"/board-games/pyxis\"\n  },\n  {\n    \"name\": \"Herakles\",\n    \"image\": HeraklesImage,\n    \"url\": \"/board-games/herakles\"\n  },\n  {\n    \"name\": \"The Vinyl Age\",\n    \"image\": TheVinylAgeImage,\n    \"url\": \"/board-games/the-vinyl-age\"\n  },\n  {\n    \"name\": \"Rules Inc.\",\n    \"image\": RulesIncImage,\n    \"url\": \"/board-games/rules-inc\"\n  },\n  {\n    \"name\": \"Interns Of Hades\",\n    \"image\": InternsOfHadesImage,\n    \"url\": \"/board-games/interns-of-hades\"\n  }\n]\n\nfunction BoardGamesIndex() {\n  return (\n    <div className=\"page-content\">\n      <p className=\"page-title\">Board Games</p>\n      <LinkBoxes links={games}/>\n    </div>\n  );\n}\n\nexport default BoardGamesIndex;\n","import React, {useState} from 'react';\nimport ReactMarkdown from \"react-markdown\";\nimport HeraklesMarkdown from \"./Herakles.md\";\nimport TheVinylAgeMarkdown from \"./TheVinylAge.md\";\nimport PyxisMarkdown from \"./Pyxis.md\";\nimport RulesIncMarkdown from \"./RulesInc.md\";\nimport InternsOfHadesMarkdown from \"./InternsOfHades.md\";\nimport {\n  useParams\n} from \"react-router-dom\";\n\nfunction BoardGamesDetails() {\n  let { name } = useParams();\n\n  const defaultMarkdown = \"Invalid URL: The page for \" + name + \" doesn't exist.\";\n  const [markdown, setMarkdown] = useState(defaultMarkdown);\n\n  const markdownPages = {\n    \"herakles\": HeraklesMarkdown,\n    \"the-vinyl-age\": TheVinylAgeMarkdown,\n    \"rules-inc\": RulesIncMarkdown,\n    \"interns-of-hades\": InternsOfHadesMarkdown,\n    \"pyxis\": PyxisMarkdown\n  } \n\n  if (markdownPages[name] != null) {\n    fetch(markdownPages[name]).then(res => res.text()).then(text => setMarkdown(text));\n  }\n\n  return (\n    <div className=\"page-content\">\n      <div className=\"page-section\">\n        <ReactMarkdown source={markdown} />\n      </div>\n    </div>\n  );\n}\n\nexport default BoardGamesDetails;\n","import React from 'react';\nimport PyxisImage from '../../assets/Pyxis.jpg';\nimport LinkBoxes from '../../components/LinkBoxes';\n\nconst games = [\n  {\n    \"name\": \"Numbers\",\n    \"image\": PyxisImage,\n    \"url\": \"/digital-games/numbers\"\n  },\n  {\n    \"name\": \"Pocket Hexes\",\n    \"image\": PyxisImage,\n    \"url\": \"/digital-games/pocket-hexes\"\n  },\n  {\n    \"name\": \"Only Connect Grid\",\n    \"image\": PyxisImage,\n    \"url\": \"/digital-games/only-connect\"\n  },\n  {\n    \"name\": \"Who Wants To Be A Millionaire\",\n    \"image\": PyxisImage,\n    \"url\": \"/digital-games/millionaire\"\n  }\n]\n\nfunction DigitalGamesIndex() {\n  return (\n    <div className=\"page-content\">\n      <p className=\"page-title\">Digital Games</p>\n      <LinkBoxes links={games}/>\n    </div>\n  );\n}\n\nexport default DigitalGamesIndex;\n","/*\n * Return a random multiple of an integer, between a given minimum or maximum.\n */\nexport const randomInteger = function(max, min, multiple) {\n    var range = max - min + 1;\n    var multipleRange = Math.floor(range / multiple);\n    var multipleLowerLimit = Math.floor(min / multiple) - 1;\n\n    var random = Math.random(); //Between 0 and 1.\n    random = random * multipleRange; // Between 0 and multipleRange.\n    random = Math.ceil(random); //Integer between 1 and multipleRange\n    random = random + multipleLowerLimit;\n    random = random * multiple; //Definitely a multiple.\n\n    return random;\n}\n\n\nexport const shuffleArray = function(array) {\n    var counter = array.length;\n\n    while(counter > 0) {\n        var index = Math.floor(Math.random() * counter);\n        counter--;\n\n        var element = array.splice(index, 1);\n        array.push(element[0]);\n    }\n}\n\nexport const arraysMatch = function(arr1, arr2) {\n    arr1.sort();\n    arr2.sort();\n\n    // Check if the arrays are the same length\n    if (arr1.length !== arr2.length) return false;\n\n    // Check if all items exist and are in the same order\n    for (var i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) return false;\n    }\n\n    return true;\n}","import React from 'react';\nimport './Numbers.css';\nimport { randomInteger, shuffleArray } from '../DigitalGamesUtils';\n\n\nclass NumbersGame extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            numbers: [],\n            upcomingNumbers: [],\n            target: 0,\n            score: 0,\n            movesRemaining: 0,\n            highlightedOperation: null,\n            highlightedIndex: null,\n            errorMessage: \"\",\n            scoreMessage: \"\",\n            gameOver: false\n        }\n    }\n\n    componentDidMount() {\n        this.restartGame();\n    }\n\n    restartGame = () => {\n        // Set up the initial array for the numbers.\n        var numbersArray = [];\n\n        // Pick 4 single digits.\n        for (var i = 0; i < 4; i++) {\n            numbersArray.push(randomInteger(9, 1, 1));\n        }\n\n        // Also add a low multiple of 5 and 25.\n        numbersArray.push(randomInteger(25, 10, 5));\n        numbersArray.push(randomInteger(100, 25, 25));\n\n        var target;\n\n        do {\n            target = randomInteger(50, 21, 1);\n        } while (numbersArray.includes(target));\n\n        var upcomingNumbers = [1,2,3,4,5,10];\n        shuffleArray(upcomingNumbers);\n\n        this.setState({\n            numbers: numbersArray,\n            upcomingNumbers: upcomingNumbers,\n            target: target,\n            score: 0,\n            movesRemaining: 6,\n            highlightedOperation: null,\n            highlightedIndex: null,\n            errorMessage: \"\",\n            scoreMessage: \"\",\n            gameOver: false\n        });\n    }\n\n    operations = [\"+\", \"-\", \"X\", \"/\"];\n\n    handleNumberClick(clickedIndex) {\n        if (this.state.gameOver) {\n            return;\n        } else if (clickedIndex === this.state.highlightedIndex) {\n            // Clicking same number again cancels.\n            this.setState({highlightedIndex: null});\n        } else if (this.state.highlightedOperation != null && this.state.highlightedIndex != null) {\n            // We have a number and an operation, so make a move.\n            this.makeMove(clickedIndex);\n        } else {\n            // Highlight the number.\n            this.setState({highlightedIndex: clickedIndex});\n        }\n    }\n\n    makeMove = (clickedIndex) => {\n        var firstNumber = this.state.numbers[this.state.highlightedIndex];\n        var secondNumber = this.state.numbers[clickedIndex];\n\n        var createdNumber = this.performOperation(firstNumber, secondNumber);\n\n        if (!createdNumber) {\n            // Error message state set in performOperation\n            return;\n        }\n\n        var newNumbersArray = [...this.state.numbers];\n\n        // Put the new number in where the user clicked.\n        newNumbersArray.splice(clickedIndex, 1, createdNumber);\n\n        // Add a new random number in the used up space.\n        newNumbersArray.splice(this.state.highlightedIndex, 1, this.pickNewRandomNumber());\n\n        var movesRemaining = this.state.movesRemaining - 1\n        this.setState({\n            movesRemaining: movesRemaining,\n            numbers: newNumbersArray,\n            errorMessage: \"\",\n            scoreMessage: \"\",\n            highlightedIndex: null,\n            highlightedOperation: null\n        });\n\n        if (createdNumber === this.state.target) {\n            this.updateTarget();\n        } else if (movesRemaining === 0) {\n            this.endGame();\n        }\n    }\n\n    performOperation = (firstNumber, secondNumber) => {\n        var createdNumber;\n        var errorMessage;\n\n        switch (this.state.highlightedOperation) {\n            case \"+\":\n                createdNumber = firstNumber + secondNumber;\n                break;\n            case \"-\":\n                if (firstNumber > secondNumber) {\n                    createdNumber = firstNumber - secondNumber;\n                } else {\n                    errorMessage = \"Must be a positive number!\";\n                }\n                break;\n            case \"X\":\n                createdNumber = firstNumber * secondNumber;\n                break;\n            case \"/\":\n                if (firstNumber % secondNumber === 0) {\n                    createdNumber = firstNumber / secondNumber;\n                } else {\n                    errorMessage = \"Must be a whole number!\";\n                }\n                break;\n            default:\n                errorMessage = \"Must select an operation!\";\n                break;\n        }\n\n        if (createdNumber > 999999) {\n            // Reject giant numbers because they can't fit sensibly in a box.\n            errorMessage = \"Number is too big!\"\n            createdNumber = null;\n        }\n     \n        if (errorMessage) {\n            this.setState({\n                errorMessage: errorMessage,\n                scoreMessage: \"\",\n                highlightedIndex: null,\n                highlightedOperation: null\n            });\n        }\n\n        return createdNumber;\n    }\n\n    pickNewRandomNumber = () => {\n        var newNumber = this.state.upcomingNumbers.pop();\n\n        if (this.state.upcomingNumbers.length === 0) {\n            this.refillUpcomingArray();\n        }\n\n        return Number(newNumber);\n    }\n\n    refillUpcomingArray = () => {\n        var upcomingNumbers;\n        \n        if (this.state.score < 5) {\n            upcomingNumbers = [1,2,3,4,5,10];\n        } else if (5 <= this.state.score && this.state.score < 10) {\n            upcomingNumbers = [1,2,3,5,8,10,25];\n        } else {\n            upcomingNumbers = [1,2,3,5,8,10,25,100]\n        }\n        shuffleArray(upcomingNumbers);\n\n        this.setState({upcomingNumbers: upcomingNumbers});\n    }\n\n    updateTarget = () => {\n        const minIncrease = 5;\n        const maxIncrease = 10;\n        const baseMin = 30;\n        const baseMax = 60;\n        var min;\n        var max;\n\n        if (this.state.score % 3 === 0) {\n            // Every third target is much larger.\n            min = baseMin + this.state.score ** 2 * minIncrease;\n            max = baseMax + this.state.score ** 2 * maxIncrease;\n        } else {\n            min = baseMin + this.state.score * minIncrease;\n            max = baseMax + this.state.score * maxIncrease;\n        }\n\n        var newTarget;\n\n        do {\n            newTarget = randomInteger(max, min, 1);\n        } while (this.state.numbers.includes(newTarget));\n\n        var bonusMoves = 3;\n\n        this.setState({\n            score: this.state.score + 1,\n            target: newTarget,\n            scoreMessage: \"Target Reached!\",\n            movesRemaining: this.state.movesRemaining + bonusMoves,\n        });\n    }\n\n    endGame = () => {\n        this.setState({gameOver: true});\n    }\n\n    handleOperationClick(operation) {\n        if (this.state.gameOver) {\n            return;\n        }\n\n        if (operation === this.state.highlightedOperation) {\n            this.setState({highlightedOperation: null});\n        } else if (this.state.highlightedIndex !== null) {\n            this.setState({highlightedOperation: operation});\n        }\n    }\n\n    handleCancelClick() {\n        this.setState({highlightedOperation: null, highlightedIndex: null});\n    }\n\n    render() {\n        return (\n            <div className=\"numbers-game-container\">\n                <div className=\"target-container\">\n                    <p className=\"target-container-label\">Target:</p>\n                    <p className=\"target-text\">{this.state.target}</p>\n                </div>\n                <div className=\"number-box-container\">\n                    {this.state.numbers.map((number, index) =>\n                        <div key={\"number-box-\" + index} \n                            className=\"number-box\" onClick={() => { this.handleNumberClick(index) }}\n                            highlighted={index === this.state.highlightedIndex ? \"true\" : null}\n                            smalltext={number > 999 ? \"true\" : null}>\n                            {number}\n                        </div>\n                    )}\n                </div>\n                <div className=\"operation-box-container\">\n                    <div className=\"flex-spacer\"></div>\n                    {this.operations.map((operation, index) =>\n                        <div key={\"operation-box-\" + index} \n                            className=\"operation-box\" onClick={() => { this.handleOperationClick(operation) }}\n                            highlighted={operation === this.state.highlightedOperation ? \"true\" : null}>\n                            {operation}\n                        </div>\n                    )}\n                    <div className=\"cancel-box\" onClick={() => {this.handleCancelClick()}}>    \n                        Cancel\n                    </div>\n                </div>\n                <div className=\"information-container\"> \n                    <div className=\"play-stats\">\n                        <p>Score: {this.state.score}</p>\n                        <p>Moves Remaining: {this.state.movesRemaining}</p>\n                    </div>\n                    <div show={this.state.errorMessage !== \"\" ? \"true\" : null} className=\"error-container\">\n                        <p>{this.state.errorMessage}</p>\n                    </div>\n                    <div show={this.state.scoreMessage !== \"\" ? \"true\" : null} className=\"message-container\">\n                        <p>{this.state.scoreMessage}</p>\n                    </div>\n                    <div show={this.state.gameOver ? \"true\" : null} className=\"endgame-container\">\n                        <p>No more moves!</p>\n                        <button className=\"play-again-button\" onClick={this.restartGame}>Play again?</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default NumbersGame;\n","import React, {useState} from 'react';\nimport ReactMarkdown from \"react-markdown\";\nimport NumbersGame from './NumbersGame';\nimport NumbersMarkdown from './Numbers.md'\n\nfunction Numbers() {\n  const [markdown, setMarkdown] = useState(\"\");\n  fetch(NumbersMarkdown).then(res => res.text()).then(text => setMarkdown(text));\n\n\n  return (\n    <div>\n      <p className=\"page-title\">Numbers</p>\n      <div>\n        <NumbersGame/>\n      </div>\n      <div className=\"page-section\">\n        <ReactMarkdown source={markdown} />\n      </div>\n    </div>\n  );\n}\n\nexport default Numbers;\n","import React, {useState, useEffect} from 'react';\n\nfunction OnlyConnectTimer({expiredCallback, forceEnd}) {\n  const maxTime = 300;\n  const [timeTaken, setTimeTaken] = useState(0);\n  const [callbackCalled, setCallbackCalled] = useState(false);\n\n  const timerStyle = {\n    backgroundColor: \"#BBBBBB\",\n    height: \"30px\"\n  }\n\n  var timeUsed = 100 * timeTaken / maxTime;\n  var timeUsedPercentage = timeUsed.toString() + \"%\";\n\n  if (forceEnd) {\n    timeUsedPercentage = \"100%\";\n  }\n\n  var timerBarStyle = {\n    backgroundColor: \"#0088B3\",\n    width: timeUsedPercentage,\n    height: \"100%\"\n  }\n\n  useEffect(() => {\n    setTimeout(() => {\n      if (timeTaken < maxTime) {\n        setTimeTaken(timeTaken + 0.5);\n      } else if (!callbackCalled && !forceEnd) {\n        setCallbackCalled(true);\n        expiredCallback();\n      }\n    }, 500);\n  });\n\n  return (\n    <div  className=\"only-connect-timer\" style={timerStyle}>\n      <div style={timerBarStyle}> </div>\n    </div>\n  );\n}\n\nexport default OnlyConnectTimer;\n","import React from 'react';\nimport './OnlyConnect.css';\n\nfunction OnlyConnectGrid({correctAnswers, remainingAnswers, highlightedAnswers, boxClickHandler}) {\n    var allAnswers = correctAnswers.concat(remainingAnswers);\n\n    var answerGrid = [\n        allAnswers.slice(0, 4),\n        allAnswers.slice(4, 8),\n        allAnswers.slice(8, 12),\n        allAnswers.slice(12, 16),\n        allAnswers.slice(16),\n    ];\n\n    var rowsCorrect = correctAnswers.length / 4;\n\n    return (\n        <div id='grid' className='only-connect-grid' rowscorrect={rowsCorrect}>\n            {answerGrid.map((row, rowIndex) =>\n                <div\n                    key={\"grid-row-\" + rowIndex} \n                    id={\"grid-row-\" + rowIndex} \n                    className=\"only-connect-grid-row\"\n                    solved={rowIndex < rowsCorrect ? \"true\": null}>\n                    {row.map((boxText, columnIndex) =>\n                        <div\n                            key={\"box-\" + rowIndex + \"-\" + columnIndex} \n                            id={\"box-\" + rowIndex + \"-\" + columnIndex} \n                            className=\"only-connect-grid-box\"\n                            onClick={()=>{boxClickHandler(boxText)}}\n                            highlighted={highlightedAnswers.includes(boxText) ? \"true\" : null}>\n                            {boxText}\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default OnlyConnectGrid;","import React from 'react';\n\nfunction OnlyConnectLives({count}) {\n  var lives = [];\n\n  for (var i = 0; i < count; i ++) {\n    lives.push(\"dummy\");\n  }\n\n  return (\n    <div className=\"only-connect-lives\">\n        {lives.map((life, lifeIndex) =>\n            <div className=\"only-connect-life\"></div>\n        )}\n    </div>\n  );\n}\n\nexport default OnlyConnectLives;\n","import React from 'react';\nimport './OnlyConnect.css';\nimport { shuffleArray, arraysMatch } from '../DigitalGamesUtils';\nimport OnlyConnectTimer from './OnlyConnectTimer';\nimport OnlyConnectGrid from './OnlyConnectGrid';\nimport OnlyConnectLives from './OnlyConnectLives';\n\nclass OnlyConnectGame extends React.Component {\n    constructor(props) {\n        super(props);\n\n        var unsolvedAnswers = props.answers.flat(1);\n        shuffleArray(unsolvedAnswers);\n\n        this.state = {\n            unsolvedAnswers: unsolvedAnswers,\n            solvedAnswers: [],\n            highlightedAnswers: [],\n            answerList: props.answers,\n            message: false,\n            gameOver: false,\n            score: 0,\n            livesRemaining: 0\n        }\n    }\n\n    boxClickHandler = (answer) => {\n        if (this.state.gameOver ||\n            this.state.solvedAnswers.indexOf(answer)>= 0) {\n            return;\n        }\n\n        var highlightedAnswerIndex = this.state.highlightedAnswers.indexOf(answer);\n        if (highlightedAnswerIndex >= 0) {\n            this.state.highlightedAnswers.splice(highlightedAnswerIndex, 1);\n        } else {\n            this.state.highlightedAnswers.push(answer);\n        }\n\n        if (this.state.highlightedAnswers.length === 4) {\n            setTimeout(()=> {this.checkAnswers()}, 500);\n        }\n\n        this.setState({\n            highlightedAnswers: this.state.highlightedAnswers,\n            message: null\n        })\n    }\n\n    checkAnswers() {\n        var message;\n        var score = this.state.score;\n        var lives = this.state.livesRemaining;\n\n        var answer = this.findAndPopMatchingAnswer();\n        if (answer) {\n            this.moveHighlightedBoxesToSolved();\n            message = \"Correct!\";\n            score++;\n            if (score === 3) {\n                lives = 3;\n                message = \"Correct! Remember, you only get 3 chances to guess the last groups.\"\n            } else if (score === 4) {\n                this.revealAnswers();\n                score++;\n                message = \"Well done! You got all 5 points for the groups. There's another point for getting each connection.\"\n            }\n        } else {\n            message = \"Incorrect! That's not a group.\";\n\n            if (lives > 0) {\n                lives--;\n                \n                if (lives === 2) {\n                    message = \"Incorrect! Two lives remain.\";\n                } else if (lives === 1) {\n                    message = \"Incorrect! Only one life left.\"\n                } else if (lives === 0) {\n                    message = \"Game over! You get 3 points from the groups. You can still get a bonus point for each connection you get.\"\n                    this.revealAnswers();\n                }\n                \n            }\n        }\n\n        this.setState({\n            highlightedAnswers: [],\n            message: message,\n            score: score,\n            livesRemaining: lives\n        })\n    }\n\n    findAndPopMatchingAnswer() {\n        for (var i = 0; i < this.state.answerList.length; i++) {\n            if (arraysMatch(this.state.highlightedAnswers, this.state.answerList[i])) {\n                return this.state.answerList.splice(i, 1);\n            }\n        }\n\n        return null;\n    }\n\n    moveHighlightedBoxesToSolved() {\n        for (var i = 0; i < this.state.highlightedAnswers.length; i++) {\n            var answer = this.state.highlightedAnswers[i];\n            this.state.solvedAnswers.push(answer);\n\n            var answerIndex = this.state.unsolvedAnswers.indexOf(answer);\n            this.state.unsolvedAnswers.splice(answerIndex, 1);\n        }\n    }\n\n    revealAnswers() {\n        setTimeout(()=> {\n            this.setState({\n                solvedAnswers: this.state.solvedAnswers.concat(this.state.answerList.flat()),\n                unsolvedAnswers: [],\n                answerList: [],\n                gameOver: true\n            })\n        }, 500);\n    }\n\n    timerExpires = () => {\n        var pointsString = this.state.score + (this.state.score === 1 ? \" point\" : \" points\");\n\n        this.setState({\n            highlightedAnswers: [],\n            gameOver: true,\n            message: \"You're out of time! That's \" + pointsString + \" for the groups. Remember, there's a bonus point for getting the connections.\"\n        })\n\n        this.revealAnswers();\n    }\n\n    render() {\n        return (\n            <div className=\"only-connect-game-container\">\n                <OnlyConnectGrid \n                    correctAnswers={this.state.solvedAnswers} remainingAnswers={this.state.unsolvedAnswers}\n                    highlightedAnswers={this.state.highlightedAnswers} boxClickHandler={this.boxClickHandler}/>\n                <div className=\"only-connect-info-box\">\n                    <OnlyConnectLives count={this.state.livesRemaining}/>\n                    <OnlyConnectTimer forceEnd={this.state.gameOver} expiredCallback={this.timerExpires}/>\n                </div>\n                <div className=\"only-connect-message-box\">\n                    {this.state.message}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default OnlyConnectGame;\n","import React, { useState } from 'react';\nimport './OnlyConnect.css';\nimport OnlyConnectGame from './OnlyConnectGame';\n\nfunction OnlyConnectApp() {\n    const [puzzle, setPuzzle] = useState(null);\n\n    const puzzle1 = [\n        [\"Link\", \"Truss\", \"Annex\", \"Correlate\"],\n        [\"Samus\", \"Ratchet\", \"Steve\", \"Forty Seven\"],\n        [\"Fox\", \"Panther\", \"Zebra\", \"Snake\"],\n        [\"Papadam\", \"Seventy\", \"Marocain\", \"Gabelle\"],\n        [\"Nine\", \"Twenty Five\", \"Forty Nine\", \"Sixty Four\"]\n    ];\n\n    const puzzle2 = [\n        [\"Bonehead\", \"The Edge\", \"Slash\", \"Joe Strummer\"],\n        [\"Trustworthy\", \"Misevent\", \"Freighter\", \"Zaniness\"],\n        [\"Pan\", \"The Italian\", \"Cheeseburger\", \"Crown\"],\n        [\"Stelmaria\", \"Hester\", \"Asta\", \"Kirjava\"],\n        [\"Meg\", \"Jo\", \"Beth\", \"Amy\"]\n    ];\n\n    const donnasPuzzle = [\n        [\"Langham\", \"Szmanda\", \"Eads\", \"Hall\"],\n        [\"Sadness\", \"Riley\", \"Joy\", \"Disgust\"],\n        [\"Fox\", \"Moogle\", \"Stowe\", \"Cooper\"],\n        [\"San Francisco\", \"Vienna\", \"Alexandria\", \"Edinburgh\"],\n        [\"Xander\", \"Giles\", \"Willow\", \"Kennedy\"]\n    ];\n    \n    const buttonClick = (puzzle) => {\n        setPuzzle(puzzle);\n    }\n\n    var content;\n\n    if (puzzle) {\n        content = <OnlyConnectGame answers={puzzle}/>\n    } else {\n        content = <div className=\"only-connect-intro-page\">\n            <p className=\"only-connect-intro-title\">Only Connect Wall Round!</p>\n            <p className=\"only-connect-intro-text\">When your whole team can see your screen and is ready, choose a puzzle to begin!</p>\n            <div className=\"only-connect-intro-buttons\">\n                <button className=\"only-connect-start-button\" onClick={()=>{buttonClick(puzzle1)}}>Puzzle 1</button>\n                <button className=\"only-connect-start-button\" onClick={()=>{buttonClick(puzzle2)}}>Puzzle 2</button>\n            \n            </div>\n            \n        </div>\n    }\n    return (\n        <div className=\"only-connect-app-container\">\n            {content}\n        </div>\n    );\n  }\n\n\nexport default OnlyConnectApp;\n","import React, {useState} from 'react';\nimport ReactMarkdown from \"react-markdown\";\nimport OnlyConnectApp from './OnlyConnectApp';\nimport OnlyConnectMarkdown from './OnlyConnect.md';\n\nfunction OnlyConnect() {\n  const [markdown, setMarkdown] = useState(\"\");\n  fetch(OnlyConnectMarkdown).then(res => res.text()).then(text => setMarkdown(text));\n\n  return (\n    <div>\n      <p className=\"page-title\">Only Connect Wall</p>\n      <div>\n        <OnlyConnectApp/>\n      </div>\n      <div className=\"page-section\">\n        <ReactMarkdown source={markdown} />\n      </div>\n    </div>\n  );\n}\n\nexport default OnlyConnect;\n","import React from 'react';\nimport './Millionaire.css';\n\nconst questionLetters = [\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\"\n]\n\nfunction MillionaireQuestionPanel({currentQuestion,highlightedAnswer, fiftyFifty, questionState, callback}) {\n    function doesFiftyFiftyHide(answer) {\n        if (!fiftyFifty) {\n            return false;\n        } else if (answer === currentQuestion.correctAnswer || answer === currentQuestion.fiftyFiftyAnswer) {\n            return false;\n        }\n\n        return true;\n    }\n    \n    return (\n        <div className=\"millionaire-question-panel\">\n            <div className=\"millionaire-question-container\">\n                {currentQuestion.question}\n            </div>\n            <div className=\"millionaire-answers-container\" questionstate={questionState}>\n                {currentQuestion.answers.map((answer, answerIndex) =>\n                    <div\n                        key={\"millionaire-answer-\" + answerIndex}\n                        className=\"millionaire-answer\"\n                        hideanswer={doesFiftyFiftyHide(answer) ? \"true\" : null}\n                        highlighted={answer === highlightedAnswer ? \"true\" : null}\n                        onClick={() => {callback(answer)}}>\n                        <div className=\"millionaire-answer-letter\">\n                            {questionLetters[answerIndex]}:\n                        </div>\n                        <div className=\"millionaire-answer-text\">\n                            {answer}\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n  }\n\n\nexport default MillionaireQuestionPanel;\n","export const pointsList = [\n    \"1 point\",\n    \"2 points\",\n    \"3 points\",\n    \"4 points\",\n    \"5 points\",\n    \"6 points\",\n    \"7 points\",\n    \"8 points\",\n    \"10 points\",\n    \"13 points\",\n    \"16 points\",\n    \"20 points\"\n];\n\nexport const sideButtons = {\n    FIFTYFIFTY: \"50/50\",\n    ASKA: \"Ask Dave\",\n    ASKB: \"Ask Radhika\",\n    WALK: \"Walk\"\n}\n\nexport const eventButtons = {\n    NONE: \"\",\n    CONFIRM: \"I'm sure\",\n    RETHINK: \"Let me think...\",\n    CONTINUE: \"Continue\",\n    OHNO: \"Oh no!\",\n    WALKAWAYCONF: \"Walk\",\n    WALKAWAYCANCEL: \"Keep Going\"\n}\n\nexport const questionState = {\n    GUESSING: \"guessing\",\n    CORRECT: \"correct\",\n    INCORRECT: \"incorrect\"\n}","import React from 'react';\nimport './Millionaire.css';\nimport {eventButtons} from './MillionaireConstants';\n\nfunction MillionaireMessagePanel({message, greenButtonText, redButtonText, callback}) {\n    return (\n        <div className=\"millionaire-message-panel\">\n            <div className=\"millionaire-message-box\">\n                {message}\n            </div>\n            <div className=\"millionaire-buttons\">\n                <button \n                    className=\"millionaire-button-green\" \n                    hidebutton={greenButtonText === eventButtons.NONE ? \"true\" : null} \n                    onClick={() => {callback(greenButtonText)}}>\n                    {greenButtonText}\n                </button>\n                <button \n                    className=\"millionaire-button-red\" \n                    hidebutton={redButtonText === eventButtons.NONE ? \"true\" : null} \n                    onClick={() => {callback(redButtonText)}}>\n                    {redButtonText}\n                </button>\n            </div>\n        </div>\n    );\n  }\n\n\nexport default MillionaireMessagePanel;\n","import React from 'react';\nimport './Millionaire.css';\nimport { pointsList, sideButtons } from './MillionaireConstants';\n\nfunction MillionaireSidePanel({currentScoreIndex, lifelines, showWalkAway, callback}) {\n    return (\n        <div className=\"millionaire-side-panel\">\n            <div className=\"millionaire-lifelines\">\n                {lifelines.map((lifeline, lifelineIndex) =>\n                    <button \n                        key={\"millionaire-lifelines-\" + lifelineIndex}\n                        className=\"millionaire-lifeline\"\n                        hidelifeline={lifeline === \"\" ? \"true\" : null}\n                        onClick={() => {callback(lifeline)}}>\n                        {lifeline}\n                    </button>\n                )}\n            </div>\n            <div className=\"millionaire-score-tracker\">\n                {pointsList.map((points, pointsIndex) =>\n                    <div\n                        key={\"millionaire-points-\" + pointsIndex}\n                        className=\"millionaire-points\" \n                        checkpoint={pointsIndex % 4 === 3 ? \"true\" : null}\n                        currentscore={currentScoreIndex === pointsIndex ? \"true\" : null}>\n                        <div className=\"millionaire-points-label\">\n                            {pointsIndex + 1}\n                        </div>\n                        <div>\n                            {points}\n                        </div>\n                    </div>\n                )}\n            </div>\n            <div className=\"millionaire-walk-away\">\n                <button \n                    className=\"millionaire-button-red\" \n                    hidebutton={!showWalkAway ? \"true\" : null} \n                    onClick={() => {callback(sideButtons.WALK)}}>\n                    Walk Away\n                </button>\n            </div>\n\n        </div>\n    );\n  }\n\n\nexport default MillionaireSidePanel;\n","import React from 'react';\nimport './Millionaire.css';\nimport MillionaireQuestionPanel from './MillionaireQuestionPanel';\nimport MillionaireMessagePanel from './MillionaireMessagePanel';\nimport MillionaireSidePanel from './MillionaireSidePanel';\nimport { pointsList, sideButtons, eventButtons, questionState } from './MillionaireConstants';\n\nclass MillionaireGame extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.questions = props.answers;\n\n        this.state = {\n            message: \"Good luck! Here's question one.\",\n            questionIndex: 0,\n            scoreIndex: -1,\n            lifelines: [sideButtons.FIFTYFIFTY, sideButtons.ASKA, sideButtons.ASKB],\n            finalScoreSet: false,\n            finalScoreIndex: -1,\n            highlightedAnswer: null,\n            greenButtonText: eventButtons.NONE,\n            redButtonText: eventButtons.NONE,\n            questionState: questionState.GUESSING,\n            fiftyFifty: false,\n            showWalkaway: false\n        }\n    }\n\n    highlightQuestion = (answer) => {\n        if (this.state.greenButtonText !== eventButtons.NONE && \n            this.state.greenButtonText !== eventButtons.CONFIRM) {\n            return;\n        }\n\n        if (answer === this.state.highlightedAnswer) {\n            this.setState({\n                highlightedAnswer: null,\n                message: null,\n                greenButtonText: eventButtons.NONE,\n                redButtonText: eventButtons.NONE\n            })\n        } else {\n            this.setState({\n                highlightedAnswer: answer,\n                message: \"Are you sure?\",\n                greenButtonText: eventButtons.CONFIRM,\n                redButtonText: eventButtons.RETHINK\n            })\n        }\n    };\n\n    clearAnswer = () => {\n        if (this.state.finalScoreSet) {\n            this.setState({\n                message: \"Take your time.\",\n                highlightedAnswer: null,\n                greenButtonText: eventButtons.NONE,\n                redButtonText: eventButtons.NONE\n            })\n        } else {\n            this.setState({\n                message: \"Take your time. You can still walk away.\",\n                highlightedAnswer: null,\n                greenButtonText: eventButtons.NONE,\n                redButtonText: eventButtons.NONE\n            })\n        }\n\n    }\n\n    submitAnswer = () => {\n        var correctAnswer = this.questions[this.state.questionIndex].correctAnswer;\n\n        if (this.state.highlightedAnswer === correctAnswer) {\n            var finalScoreIndex = this.state.finalScoreIndex;\n            var scoreIndex = this.state.scoreIndex;\n\n            if (!this.state.finalScoreSet && this.state.questionIndex % 4 === 3) {\n                finalScoreIndex = this.state.questionIndex;\n            }\n\n            var message =  \"Correct! Get ready for the next question.\";\n            var allQuestionsDone = (this.state.questionIndex === this.questions.length - 1);\n            if (allQuestionsDone && !this.state.finalScoreSet) {\n                scoreIndex++;\n                message = \"Congratulations! You got all the questions right!\";\n            } else if (allQuestionsDone) {\n                message = \"That's the last question.\";\n            }\n\n            this.setState({\n                message: message,\n                finalScoreIndex: finalScoreIndex,\n                greenButtonText: eventButtons.CONTINUE,\n                redButtonText: eventButtons.NONE,\n                scoreIndex: scoreIndex,\n                questionState: questionState.CORRECT,\n                showWalkaway: (!allQuestionsDone && !this.state.finalScoreSet)\n            })\n        } else {\n            var nextButton = eventButtons.CONTINUE;\n\n            if (!this.state.finalScoreSet) {\n                nextButton = eventButtons.OHNO;\n            }\n\n            this.setState({\n                message: \"I'm sorry, that's not the answer! The correct answer was \" + correctAnswer + \".\",\n                finalScoreSet: true,\n                greenButtonText: nextButton,\n                redButtonText: eventButtons.NONE,\n                questionState: questionState.INCORRECT,\n                showWalkaway: false\n            })\n        }\n    }\n\n    incorrectAnswerSubmitted = () => {\n        this.setState({\n            scoreIndex: this.state.finalScoreIndex\n        });\n\n        this.displayFinalScoreAndContinue();\n    }\n\n    printScore = (index) => {\n        var string = \"0 points\";\n\n        if (index >= 0) {\n            string = pointsList[index];\n        }\n\n        return string;\n    }\n\n    displayFinalScoreAndContinue = () => { \n        this.setState({\n            message: \"You got \" + this.printScore(this.state.finalScoreIndex) + \" for the round. You can do the rest of the questions while you wait.\",\n            greenButtonText: eventButtons.CONTINUE\n        })\n    }\n\n    continueWithRound = () => {\n        var questionIndex = this.state.questionIndex + 1;\n\n        if (questionIndex === this.questions.length) {\n            this.setState({\n                message: \"That's the end of the quiz! You got \" + this.printScore(this.state.finalScoreIndex) + \". Thanks for playing.\",\n                greenButtonText: eventButtons.NONE,\n                redButtonText: eventButtons.NONE\n            });\n        } else {\n            var scoreIndex = this.state.scoreIndex;\n\n            if (!this.state.finalScoreSet) {\n                scoreIndex++;\n            }\n    \n            this.setState({\n                questionIndex: questionIndex,\n                scoreIndex: scoreIndex,\n                message: null,\n                greenButtonText: eventButtons.NONE,\n                redButtonText: eventButtons.NONE,\n                highlightedAnswer: null,\n                questionState: questionState.GUESSING,\n                fiftyFifty: false\n            });\n        }\n    }\n\n    lifelineFiftyFifty = () => {\n        if (this.state.greenButtonText !== eventButtons.NONE && \n            this.state.greenButtonText !== eventButtons.CONFIRM) {\n            return;\n        }\n\n        this.setState({\n            message: \"Okay, I've removed two incorrect answers!\",\n            fiftyFifty: true\n        });\n        \n        this.consumeLifeline(sideButtons.FIFTYFIFTY);\n    }\n\n    lifelineAsk = (button) => {\n        if (this.state.greenButtonText !== eventButtons.NONE && \n            this.state.greenButtonText !== eventButtons.CONFIRM) {\n            return;\n        }\n\n        console.log(button);\n        var message;\n        var currentQuestion = this.questions[this.state.questionIndex]\n        if (button === sideButtons.ASKA) {\n            message = \"Dave says: \" + currentQuestion.askA;\n        } else {\n            message = \"Radhika says: \" + currentQuestion.askB;\n        }\n\n        this.setState({message: message});\n        this.consumeLifeline(button);\n    }\n\n    consumeLifeline = (lifeline) => {\n        var index = this.state.lifelines.indexOf(lifeline);\n        this.state.lifelines[index] = \"\";\n    }\n\n    walkAwayPrompt = () => {\n        this.setState({\n            message: \"Are you sure you want to walk away with \" + this.printScore(this.state.scoreIndex) + \"?\",\n            greenButtonText: eventButtons.WALKAWAYCONF,\n            redButtonText: eventButtons.WALKAWAYCANCEL\n        });\n    }\n    \n    walkAwayConfirm = () => {\n        this.setState({\n            finalScoreSet: true,\n            finalScoreIndex: this.state.scoreIndex,\n            message: \"You get \" + this.printScore(this.state.scoreIndex) + \" for the round! You can keep going while you wait.\",\n            greenButtonText: eventButtons.NONE,\n            redButtonText: eventButtons.NONE,\n            showWalkaway: false\n        });\n    }\n\n    walkAwayCancel = () => {\n        this.setState({\n            message: \"Good luck!\",\n            greenButtonText: eventButtons.NONE,\n            highlightedAnswer: null,\n            redButtonText: eventButtons.NONE\n        });\n    }\n\n    handleEventButton = (button) => {\n        switch (button) {\n            case eventButtons.CONFIRM:\n                this.submitAnswer();\n                break;\n            case eventButtons.RETHINK:\n                this.clearAnswer();\n                break;\n            case eventButtons.OHNO:\n                this.incorrectAnswerSubmitted();\n                break;\n            case eventButtons.CONTINUE:\n                this.continueWithRound();\n                break;\n            case eventButtons.WALKAWAYCONF:\n                this.walkAwayConfirm();\n                break;\n            case eventButtons.WALKAWAYCANCEL:\n                this.walkAwayCancel();\n                break;\n            default:\n                break;\n        }\n    }\n\n    handleSideButton = (button) => {\n        switch (button) {\n            case sideButtons.FIFTYFIFTY:\n                this.lifelineFiftyFifty();\n                break;\n            case sideButtons.ASKA:\n            case sideButtons.ASKB:\n                this.lifelineAsk(button);\n                break;\n            case sideButtons.WALK:\n                this.walkAwayPrompt();\n                break;\n            default:\n                break;\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"millionaire-game-container\">\n                <div className=\"millionaire-main-panel\">\n                    <MillionaireQuestionPanel \n                        currentQuestion={this.questions[this.state.questionIndex]} \n                        highlightedAnswer={this.state.highlightedAnswer}\n                        questionState={this.state.questionState}\n                        fiftyFifty={this.state.fiftyFifty}\n                        callback={this.highlightQuestion}\n                    />\n                    <MillionaireMessagePanel \n                        currentQuestion={this.questions[this.state.questionIndex]} \n                        highlightedAnswer={this.state.highlightedAnswer}\n                        questionState={this.state.questionState}\n                        fiftyFifty={this.state.fiftyFifty}\n                        message={this.state.message}\n                        greenButtonText={this.state.greenButtonText}\n                        redButtonText={this.state.redButtonText}\n                        callback={this.handleEventButton}\n                    />\n                </div>\n                <MillionaireSidePanel\n                    currentScoreIndex={this.state.scoreIndex}\n                    lifelines={this.state.lifelines}\n                    showWalkAway={this.state.showWalkaway}\n                    callback={this.handleSideButton}\n                />\n            </div>\n        );\n    }\n}\n\nexport default MillionaireGame;\n","export const testPuzzle = [\n    {\n        question: \"Question 1. Which of the following objects is the largest?\",\n        answers: [\n            \"A Peanut\",\n            \"A Kettle\",\n            \"The Moon\",\n            \"An Elephant\"\n        ],\n        correctAnswer: \"The Moon\",\n        askA: \"E.\",\n        askB: \"Is that a trick question? If the moon refers to a celestial body it's the moon.\",\n        fiftyFiftyAnswer: \"An Elephant\"\n    },\n    {\n        question: \"Question 2. Which of these was a hit musical in 2015?\",\n        answers: [\n            \"Hamilton\",\n            \"Senna\",\n            \"Vettel\",\n            \"Schumacher\"\n        ],\n        correctAnswer: \"Hamilton\",\n        askA: \"Really? Really?! It's A.\",\n        askB: \"Hamilton came to Chicago in 2016 so maybe it was a hit in 2015 on Broadway already? Never heard of Schumacher musical. Senna and Vettel should be musicals. I'll pay to watch F1 musicals.\",\n        fiftyFiftyAnswer: \"Schumacher\"\n    },\n    {\n        question: \"Question 3. Which of these is a type of hat?\",\n        answers: [\n            \"Potato Crisp\",\n            \"Pork Pie\",\n            \"Sausage Roll\",\n            \"Scotch Egg\",\n            \n        ],\n        correctAnswer: \"Pork Pie\",\n        askA: \"bbbbbbbbbbbbb\",\n        askB: \"No idea. When in doubt, go vegan? Or for pies?\",\n        fiftyFiftyAnswer: \"Scotch Egg\"\n    },\n    {\n        question: \"Question 4. Which of these acts was supposed to headline Glastonbury in 2020?\",\n        answers: [\n            \"U2\",\n            \"Taylor Swift\",\n            \"Ed Sheeran\",\n            \"Jedward\"\n        ],\n        correctAnswer: \"Taylor Swift\",\n        askA: \"B? Not 100%.\",\n        askB: \"No clue at all. Fun fact about Jedwards: I hear they they can do their hair in like 5 seconds. Go figure.\",\n        fiftyFiftyAnswer: \"Jedward\"\n    },\n    {\n        question: \"Question 5. Which of these is a dance popularised by Fortnite?\",\n        answers: [\n            \"Brushing\",\n            \"Mouthwashing\",\n            \"Rinsing\",\n            \"Flossing\"\n        ],\n        correctAnswer: \"Flossing\",\n        askA: \"I think it's D.\",\n        askB: \"Flossing, definitely flossing. Rinsing would be a hard dance move.\",\n        fiftyFiftyAnswer: \"Mouthwashing\"\n    },\n    {\n        question: \"Question 6. How many James Bond films did Pierce Brosnan make?\",\n        answers: [\n            \"Two\",\n            \"Three\",\n            \"Four\",\n            \"Five\"\n        ],\n        correctAnswer: \"Four\",\n        askA: \"Have you C-n them?\",\n        askB: \"Hmm, I was about to say 5... let’s see Tomorrow Never Dies, World Is Not Enough, Die Another Day, Golden Eye. So maybe 4?\",\n        fiftyFiftyAnswer: \"Two\"\n    },\n    {\n        question: \"Question 7. What is the capital of Brazil?\",\n        answers: [\n            \"Brasilia\",\n            \"São Paulo\",\n            \"Rio de Janeiro\",\n            \"Salvador\"\n        ],\n        correctAnswer: \"Brasilia\",\n        askA: \"A. Common misconception.\",\n        askB: \"Brasília. Salvador and Rio used to be capitals. Brasilia was the inspiration for my hometown. Also, the lake has water now.\",\n        fiftyFiftyAnswer: \"Salvador\"\n    },\n    {\n        question: \"Question 8. Which of these mythological figures was NOT fathered by Zeus?\",\n        answers: [\n            \"Ares\",\n            \"Apollo\",\n            \"Dionysus\",\n            \"Poseidon\"\n        ],\n        correctAnswer: \"Poseidon\",\n        askA: \"Definitely D - his brother.\",\n        askB: \"I err don’t know. Poseidon and Zeus were siblings according to Percy Jackson series so maybe Poseidon? Apollo was definitely Zeus’ son.\",\n        fiftyFiftyAnswer: \"Dionysus\"\n    },\n    {\n        question: \"Question 9. Which artist's greatest hits is the UK's highest selling album, as of December 2018?\",\n        answers: [\n            \"Queen\",\n            \"ABBA\",\n            \"The Beatles\",\n            \"Michael Jackson\"\n        ],\n        correctAnswer: \"Queen\",\n        askA: \"Most likely A.\",\n        askB: \"I have no idea at all. I’d say Queen or Beatles. But purely guessing.\",\n        fiftyFiftyAnswer: \"ABBA\"\n    },\n    {\n        question: \"Question 10. Which of these has never been a full cast member on Saturday Night Live?\",\n        answers: [\n            \"Melissa McCarthy\",\n            \"Julia Louis-Dreyfus\",\n            \"Bill Murray\",\n            \"Ben Stiller\"\n        ],\n        correctAnswer: \"Melissa McCarthy\",\n        askA: \"D? Blind guess, sorry!\",\n        askB: \"All 4 have hosted SNL but full cast members… I don’t know. Melissa McCarthy would be my guess. \",\n        fiftyFiftyAnswer: \"Ben Stiller\"\n    },\n    {\n        question: \"Question 11. Oberon is the satellite of which planet?\",\n        answers: [\n            \"Saturn\",\n            \"Uranus\",\n            \"Neptune\",\n            \"Jupiter\"\n        ],\n        correctAnswer: \"Uranus\",\n        askA: \"Err. B?\",\n        askB: \"Uranus. It was named after the king of the fairies in Midsummer’s night dream.\",\n        fiftyFiftyAnswer: \"Neptune\"\n    },\n    {\n        question: \"Question 12. Which king was married to Eleanor of Aquitaine?\",\n        answers: [\n            \"Henry V\",\n            \"Henry I\",\n            \"Henry II\",\n            \"Richard I\"\n        ],\n        correctAnswer: \"Henry II\",\n        askA: \"C? Not Richard certainly.\",\n        askB: \"Wow, no idea. I thought she married Louis xx of France… Hmmm she was in Shakespeare’s play King John so maybe she married Henry II? No idea at all.\",\n        fiftyFiftyAnswer: \"Henry V\"\n    }\n];\n","import React, { useState } from 'react';\nimport './Millionaire.css';\nimport MillionaireGame from './MillionaireGame';\nimport { testPuzzle } from './MillionaireQuestionLists';\n\nfunction MillionaireApp() {\n    const [puzzle, setPuzzle] = useState(null);\n    \n    const buttonClick = (puzzle) => {\n        setPuzzle(puzzle);\n    }\n\n    var content;\n\n    if (puzzle) {\n        content = <MillionaireGame answers={puzzle}/>\n    } else {\n        content = <div className=\"millionaire-intro-page\">\n            <p className=\"millionaire-intro-title\">Who Wants To Win 20 Points?</p>\n            <p className=\"millionaire-intro-text\">When your whole team can see your screen and is ready, click start to begin!</p>\n            <div className=\"millionaire-intro-buttons\">\n                <button className=\"millionaire-start-button\" onClick={()=>{buttonClick(testPuzzle)}}>Start</button>\n            </div> \n        </div>\n    }\n    return (\n        <div className=\"millionaire-app-container\">\n            {content}\n        </div>\n    );\n  }\n\n\nexport default MillionaireApp;\n","import React, {useState} from 'react';\nimport ReactMarkdown from \"react-markdown\";\nimport MillionaireApp from './MillionaireApp';\nimport MillionaireMarkdown from './Millionaire.md';\n\nfunction Millionaire() {\n  const [markdown, setMarkdown] = useState(\"\");\n  fetch(MillionaireMarkdown).then(res => res.text()).then(text => setMarkdown(text));\n\n  return (\n    <div>\n      <p className=\"page-title\">Who Wants To Be A Millionaire?</p>\n      <div>\n        <MillionaireApp/>\n      </div>\n      <div className=\"page-section\">\n        <ReactMarkdown source={markdown} />\n      </div>\n    </div>\n  );\n}\n\nexport default Millionaire;\n","import React from 'react';\n\nfunction Hexagon(props) {\n  return (\n    <div\n        key={\"hex-\" + props.hex.row + \"-\" + props.hex.index} \n        id={\"hex-\" + props.hex.row + \"-\" + props.hex.index} \n        className=\"hexagon\"\n        hexstate={props.hex.state}>\n        <span>{props.hex.value}</span>\n        <svg className=\"hexagonSvg\" viewBox=\"0 0 174 200\">\n          <polyline points=\"87,0 174,50 174,150 87,200 0,150 0,50 87,0\"/>\n        </svg>\n    </div>\n  );\n}\n\nexport default Hexagon;\n","import React from 'react';\nimport './PocketHexes.css';\nimport Hexagon from './Hexagon';\n\nconst hexStates = {\n    EMPTY: \"empty\",\n    PLACABLE: \"placable\",\n    PLACED: \"placed\",\n    SCORABLE: \"scorable\",\n    UNSCORABLE: \"unscorable\",\n    SCORED: \"scored\"\n};\n\nclass PocketHexesGame extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            score: 0,\n            scoredThisRound: false,\n            diceToPick: 3,\n            diceRolls: this.generateDiceRolls(),\n            selectedDice: null,\n            grid: this.createGrid()\n        }\n    }\n\n    createGrid() {\n        var grid = [];\n\n        grid.push(this.createRow(0, 0, 5));\n        grid.push(this.createRow(1, 0, 6));\n        grid.push(this.createRow(2, 0, 7));\n        grid.push(this.createRow(3, 0, 8));\n        grid.push(this.createRow(4, 0, 9));\n        grid.push(this.createRow(5, 1, 8));\n        grid.push(this.createRow(6, 2, 7));\n        grid.push(this.createRow(7, 3, 6));\n        grid.push(this.createRow(8, 4, 5));\n\n        var centerHex = grid [4][4];\n        centerHex.value = 1;\n        centerHex.state = hexStates.PLACED;\n\n        return grid;\n    }\n\n    createRow(rowNumber, startIndex, length) {\n        var row = [];\n\n        for (var i = 0; i < length; i++) {\n            row.push(this.createHex(rowNumber, i + startIndex));\n        }\n\n        return row;\n    }\n\n    createHex(row, index) {\n        var hex = {\n            value: null,\n            state: hexStates.EMPTY,\n            row: row,\n            index: index\n        };\n\n        return hex;\n    }\n\n    handleSelectHex(hex) {\n        if (!this.state.scoredThisRound && hex.state === hexStates.SCORABLE) {\n            // Score this hex.\n            hex.state = hexStates.SCORED;\n            this.setState({\n                score: this.state.score + hex.value,\n                scoredThisRound: true\n            });\n            this.updateHexes();\n        } else if (hex.state === hexStates.PLACABLE) {\n            // Place a value in this hex.\n            hex.value = this.state.diceRolls[this.state.selectedDice];\n            hex.state = hexStates.PLACED;\n            this.spendDice();\n            this.updateHexes();\n        }\n    }\n\n    updateHexes(valueToPlace) {\n        for (var rowIndex = 0; rowIndex < this.state.grid.length; rowIndex++) {\n            for (var hexIndex = 0; hexIndex < this.state.grid[rowIndex].length; hexIndex++) {\n                var hex = this.state.grid[rowIndex][hexIndex];\n                \n                switch (hex.state) {\n                    case hexStates.EMPTY:\n                        // May be placeable\n                        if (valueToPlace !== null) {\n                            this.updateHexForPlacable(hex, valueToPlace);\n                        }\n                        break;\n                    case hexStates.PLACABLE:\n                        if (valueToPlace === undefined) {\n                            // Chose not to place- clear old data.\n                            hex.state = hexStates.EMPTY;\n                        } \n                        break;\n                    case hexStates.PLACED:\n                        // Check if the hex can be scored.\n                        this.updateHexForScorable(hex);\n                        break;\n                    case hexStates.SCORABLE:\n                        // Missed opportunity for scoring.\n                        hex.state = hexStates.UNSCORABLE;\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n    }\n\n    updateHexForScorable(hex) {\n        var adjList = this.getAdjacentHexes(hex);\n    \n        if (adjList.length < 6) {\n            // Edge hexes can never be scored.\n            hex.state = hexStates.UNSCORABLE;\n            return;\n        }\n       \n        for (var i = 0; i < adjList.length; i++) {\n            if (adjList[i].state === hexStates.EMPTY || adjList[i].state === hexStates.PLACABLE) {\n                // Found an adjacent empty hex, can't be scored yet.\n                return;\n            }\n        }\n\n        if (this.state.scoredThisRound) {\n            hex.state = hexStates.UNSCORABLE;\n        } else {\n            hex.state = hexStates.SCORABLE;\n        }\n    }\n\n    updateHexForPlacable(hex, valueToPlace) {\n        if (valueToPlace === 0) {\n            //0 can go anywhere.\n            hex.state = hexStates.PLACABLE;\n            return;\n        }\n\n        var highestAdjValue = this.getHighestAdjValue(hex);\n        if (valueToPlace === 1) {\n            //1 can go anywhere not next to another value greater \n            if (highestAdjValue === null) {\n                hex.state = hexStates.PLACABLE;\n            }       \n            return;\n        }\n\n        if (highestAdjValue !== null && valueToPlace >= highestAdjValue) {\n            //Other numbers can only go next to lower values.\n            hex.state = hexStates.PLACABLE;\n        }\n    }\n\n    getHighestAdjValue(hex) {\n        var adjHexes = this.getAdjacentHexes(hex);\n        var highestAdjValue = null;\n\n        for (var i = 0; i < adjHexes.length; i++) {\n            var adjHex = adjHexes[i];\n\n            if (adjHex.value === null) {\n                continue;\n            } else {\n                highestAdjValue = Math.max(adjHex.value, highestAdjValue);\n            }\n        }\n\n        return highestAdjValue;\n    }\n\n    getAdjacentHexes(targetHex) {\n        var adjHexes = [];\n\n        /* The hex grid indexing is tricky. Imagine the Y axis is tilted by 30 degrees clockwise.\n        * So, the first five rows start indexing hexes at 0, as expected.\n        * For later rows, the row size is decreasing, so the sixth row doesn't have a hex at 0.\n        * The seventh row is missing a hex at 0 and 1, and so forth.\n        * \n        * As a result, we'll need to look at each hex's index property defined during setup, and\n        * can't rely on the index in the array.\n        */\n\n        // First, try and get hexes on the same row.\n        var sameRow = this.state.grid[targetHex.row];\n        var i;\n        for (i = 0; i < sameRow.length; i++) {\n            var sameRowHex = sameRow[i];\n\n            if (sameRowHex.index === targetHex.index - 1) {\n                adjHexes.push(sameRowHex);\n            } else if (sameRowHex.index === targetHex.index + 1) {\n                adjHexes.push(sameRowHex);\n            } \n        }\n\n        // Now look at the row above.\n        if (targetHex.row !== 0) {\n            var rowAbove = this.state.grid[targetHex.row - 1];\n\n            for (i = 0; i < rowAbove.length; i++) {\n                var rowAboveHex = rowAbove[i];\n    \n                if (rowAboveHex.index === targetHex.index - 1) {\n                    adjHexes.push(rowAboveHex);\n                } else if (rowAboveHex.index === targetHex.index) {\n                    adjHexes.push(rowAboveHex);\n                } \n            }\n        }\n\n        // Now look at the row below.\n        if (targetHex.row !== this.state.grid.length - 1) {\n            var rowBelow = this.state.grid[targetHex.row + 1];\n\n            for (i = 0; i < rowBelow.length; i++) {\n                var rowBelowHex = rowBelow[i];\n    \n                if (rowBelowHex.index === targetHex.index) {\n                    adjHexes.push(rowBelowHex);\n                } else if (rowBelowHex.index === targetHex.index + 1) {\n                    adjHexes.push(rowBelowHex);\n                } \n            }\n        }\n\n        return adjHexes;\n    }\n\n    handleSelectDice(index) {\n        if (this.state.diceToPick === 0) {\n            return;\n        }\n\n        this.updateHexes(this.state.diceRolls[index]);\n        this.setState({selectedDice: index});\n    }\n\n    spendDice() {\n        this.state.diceRolls[this.state.selectedDice] = null;\n        this.setState({\n            selectedDice: null,\n            diceToPick: parseInt(this.state.diceToPick) - 1\n        });\n    }\n\n    generateDiceRolls() {\n        var diceList = [4, 6, 8, 10, 12, 20];\n        var newDiceRolls = [];\n        \n        for (var i = 0; i < diceList.length; i++) {\n            var diceMax = diceList[i];\n            var diceResult = Math.ceil(Math.random() * diceMax);\n            if (diceMax == 10) {\n                diceResult--;\n            }\n            newDiceRolls.push(diceResult);\n        }\n\n        return newDiceRolls;\n    }\n\n    rollDice() {\n        if (this.state.diceToPick > 0) {\n            return;\n        }\n\n        this.updateHexes();\n        \n        var newDiceRolls = this.generateDiceRolls();\n        \n        this.setState({\n            diceRolls: newDiceRolls,\n            diceToPick: 3,\n            scoredThisRound: false\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"pocket-hexes-game-container\">\n                <span className=\"score\">Total score: {this.state.score}</span>\n                <div id='grid' className='grid'>\n                    {this.state.grid.map((row, index) =>\n                        <div key={\"row-\" + index} className=\"row\">\n                            {row.map((hex, jndex) => <div onClick={() => { this.handleSelectHex(hex) }}>\n                                <Hexagon hex={hex}/>\n                            </div>)}\n                        </div>\n\n                    )}\n                </div>\n                <div id='rolls' className='rolls'>\n                    {this.state.diceRolls.map((roll, index) =>\n                        <div key={\"rollBox-\" + index} \n                            id={\"rollBox-\" + index} \n                            className=\"rollBox\" onClick={() => { this.handleSelectDice(index) }}\n                            highlighted={index === this.state.selectedDice ? \"true\" : null}>\n                            {roll}\n                        </div>\n                    )}\n                    <button className='rollButton' onClick={() => {this.rollDice()}}>\n                        {this.state.diceToPick > 0 ? \"Dice: \" + this.state.diceToPick : \"Roll!\"}\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PocketHexesGame;\n","import React, {useState} from 'react';\nimport ReactMarkdown from \"react-markdown\";\nimport PocketHexesGame from './PocketHexesGame';\nimport PocketHexesMarkdown from './PocketHexes.md';\nimport scoring from '../../../assets/PocketHexesScoring.png';\nimport example1 from '../../../assets/PocketHexesExample1.png';\nimport example2 from '../../../assets/PocketHexesExample2.png';\nimport example3 from '../../../assets/PocketHexesExample3.png';\nimport scoringExample1 from '../../../assets/PocketHexesScoringExample1.png';\nimport scoringExample2 from '../../../assets/PocketHexesScoringExample2.png';\nimport printAndPlay from '../../../assets/PocketHexes.pdf';\n\nfunction PocketHexes() {\n  const [markdown, setMarkdown] = useState(\"\");\n  fetch(PocketHexesMarkdown).then(res => res.text()).then(text => processAndSetMarkdown(text));\n\n  function processAndSetMarkdown(text) {\n    text = text.replace(\"__SCORING__\", scoring);\n    text = text.replace(\"__SCORING_EXAMPLE_1__\", scoringExample1);\n    text = text.replace(\"__SCORING_EXAMPLE_2__\", scoringExample2);\n    text = text.replace(\"__EXAMPLE_1__\", example1);\n    text = text.replace(\"__EXAMPLE_2__\", example2);\n    text = text.replace(\"__EXAMPLE_3__\", example3);\n    text = text.replace(\"__PRINT_AND_PLAY__\", printAndPlay);\n    setMarkdown(text);\n  }\n\n  return (\n    <div>\n      <p className=\"page-title\">Pocket Hexes</p>\n      <div>\n        <PocketHexesGame/>\n      </div>\n      <div className=\"page-section\">\n        <ReactMarkdown source={markdown} />\n      </div>\n    </div>\n  );\n}\n\nexport default PocketHexes;\n","import React from 'react';\nimport Numbers from \"./Numbers/Numbers\";\nimport OnlyConnect from \"./OnlyConnect/OnlyConnect\";\nimport Millionaire from \"./Millionaire/Millionaire\";\nimport {\n  useParams\n} from \"react-router-dom\";\nimport PocketHexes from './PocketHexes/PocketHexes';\n\nfunction DigitalGamesDetails() {\n  let { name } = useParams();\n\n  const pages = {\n    \"numbers\": <Numbers/>,\n    \"pocket-hexes\": <PocketHexes/>,\n    \"only-connect\": <OnlyConnect/>,\n    \"millionaire\": <Millionaire/>\n  } \n\n  var content = <div>Invalid URL: The page for {name} doesn't exist.</div>;\n\n  if (pages[name] != null) {\n    content = pages[name];\n  }\n\n  return (\n    <div className=\"page-content\">\n        {content}\n    </div>\n  );\n}\n\nexport default DigitalGamesDetails;\n","import React from 'react';\nimport profilePhoto from '../assets/profilePhoto.jpg';\n\nfunction Contact() {\n  return (\n    <div className=\"page-content\">\n      <p className=\"page-title\">Contact</p>\n      <div className=\"page-section\">\n        <img className=\"page-inlay-image\" src={profilePhoto} alt=\"The author\"/>\n        <p>If you have questions about any of my games, feel free to get in touch with me.</p>\n        <p>Twitter: @WSGameDesign</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Contact;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Menu from './components/Menu';\nimport About from './pages/About';\nimport BoardGamesIndex from './pages/boardGames/BoardGamesIndex';\nimport BoardGamesDetails from './pages/boardGames/BoardGamesDetails';\nimport DigitalGamesIndex from './pages/digitalGames/DigitalGamesIndex';\nimport DigitalGamesDetails from './pages/digitalGames/DigitalGamesDetails';\nimport Contact from './pages/Contact';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"main-page\">\n      <Header/>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Menu/>\n        <div className=\"main-content\">\n          <Switch>\n            <Route exact path=\"/board-games\">\n              <BoardGamesIndex/>\n            </Route>\n            <Route path=\"/board-games/:name\">\n              <BoardGamesDetails/>\n            </Route>\n            <Route exact path=\"/digital-games\">\n              <DigitalGamesIndex/>\n            </Route>\n            <Route path=\"/digital-games/:name\">\n              <DigitalGamesDetails/>\n            </Route>\n            <Route path=\"/contact\">\n              <Contact/>\n            </Route>\n            <Route path=\"/\">\n              <About/>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/InternsOfHades.2f156d4f.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Background.be79be34.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Herakles.d5add04a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/TheVinylAge.6a5d93d9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/RulesInc.2fe16e90.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Herakles.a9476b69.md\";","module.exports = __webpack_public_path__ + \"static/media/TheVinylAge.194b6615.md\";","module.exports = __webpack_public_path__ + \"static/media/Pyxis.64fd2218.md\";","module.exports = __webpack_public_path__ + \"static/media/RulesInc.f7f02f9a.md\";","module.exports = __webpack_public_path__ + \"static/media/InternsOfHades.a7fc08c1.md\";","module.exports = __webpack_public_path__ + \"static/media/Numbers.e820be7a.md\";","module.exports = __webpack_public_path__ + \"static/media/OnlyConnect.9925a43f.md\";","module.exports = __webpack_public_path__ + \"static/media/Millionaire.a55df584.md\";","module.exports = __webpack_public_path__ + \"static/media/PocketHexes.5229c50c.md\";","module.exports = __webpack_public_path__ + \"static/media/PocketHexesScoring.56380bb7.png\";","module.exports = __webpack_public_path__ + \"static/media/PocketHexesExample1.6e031ae8.png\";","module.exports = __webpack_public_path__ + \"static/media/PocketHexesExample2.bc966fd2.png\";","module.exports = __webpack_public_path__ + \"static/media/PocketHexesExample3.e7f40e11.png\";","module.exports = __webpack_public_path__ + \"static/media/PocketHexesScoringExample1.7b168693.png\";","module.exports = __webpack_public_path__ + \"static/media/PocketHexesScoringExample2.9bac6343.png\";","module.exports = __webpack_public_path__ + \"static/media/PocketHexes.fdf82643.pdf\";","module.exports = __webpack_public_path__ + \"static/media/profilePhoto.c6179942.jpg\";"],"sourceRoot":""}